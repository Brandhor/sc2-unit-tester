//==================================================================================================
// 
// Generated Map Script
// 
// Name:   LOTV Unit Tester Online
// 
//==================================================================================================
include "TriggerLibs/NativeLib"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_buttonWidth = 80;
const int gv_buttonHeight = 80;
const int gv_buttonImageWidth = 76;
const int gv_buttonImageHeight = 76;
const int gv_buttonLabelWidth = 120;
const int gv_buttonLabelHeight = 40;
const int gv_xYOffset = 30;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
bool gv_pause;
timer gv_timer;
int gv_timerWindow;
revealer[11] gv_revealer;
int gv_player2;
int gv_computer;
int gv__15;
string[61] gv_unitLink;
text[61] gv_unitName;
int[61][2] gv_buttonUnit;
string[61] gv_buttonUnitFile;
text[61] gv_buttonUnitTooltip;
string[101] gv_upgradeLink;
text[101] gv_upgradeName;
int[101] gv_upgradeLevel;
bool[101][2] gv_upgradeFlag;
int[101][2] gv_buttonUpgrade;
int[101][2] gv_buttonUpgradeImage;
string[101] gv_buttonUpgradeFile;
text[101] gv_buttonUpgradeTooltip;
int gv_iUnit;
int gv_iPlayer;
int gv_iRace;
int gv_iTech;
int gv_iSlot;
int[2] gv_currentRace;
int[2] gv_currentTech;
int gv_dialogAttack;
int gv_buttonAttack;
int gv_buttonRespawn;
int gv_buttonPause;
int gv_buttonEnergy;
int gv_buttonUpgrades;
int gv_buttonSaveSubmenu2;
int gv_buttonLoadSubmenu2;
int gv_buttonVision;
int gv_buttonBack;
int gv_buttonOptionsSubmenuCopy;
int gv_buttonTerrainSubmenuCopy;
int gv_dialogPanel;
int gv_dialogCreator;
int gv_buttonOptionsSubmenu;
int gv_buttonTerrainSubmenu;
int gv_buttonMirror;
int gv_buttonSaveSubmenu;
int gv_buttonLoadSubmenu;
int gv_buttonRedo;
int gv_buttonDelete;
int gv_buttonClear;
int gv_buttonSwitch;
int gv_buttonStart;
int[4][2][2] gv_dialogUnits;
int[2] gv_dialogRace;
int[2] gv_dialogPlayer;
int[4][2] gv_buttonRace;
int gv_dialogTerrainSubmenu;
int[11] gv_buttonTerrain;
int gv_dialogSaveSubmenu;
int[10] gv_buttonSave;
int gv_dialogLoadSubmenu;
int[10] gv_buttonLoad;
int gv_dialogFilenameSubmenu;
int gv_editBox;
int gv_buttonOK;
int gv_buttonCancel;
int gv_buttonClose;
int gv_dialogOptions;
int[2] gv_buttonOptionVision;
int[4] gv_buttonOptionUpgrade;
int[2] gv_buttonOptionAbility;
int[2] gv_buttonOptionEnergy;
int[2] gv_buttonOptionInstant;
int[2] gv_buttonOptionCreep;
int[2] gv_buttonOptionPanel;
int gv_dialogAlliances;
int[9] gv_checkboxRed;
int[9] gv_checkboxBlue;
int[9] gv_checkbox;
int gv_buttonY;
int gv_leaderboard;
int[3] gv_totalMineral;
int[3] gv_totalVespene;
int gv_rowCount;
bool[3][22] gv_iconFlag;
bool gv_revealers;
bool gv_energy;
bool gv_instant;
bool gv_fastCreep;
bool[9] gv_controlRed;
bool[9] gv_controlBlue;
int[10] gv_stateTerrain;
string[10][3] gv_stateUnits;
string[10] gv_stateUpgrades;
bool gv_ctrlToggle;
bool gv_shiftToggle;
int gv_zergPlayer;
unit gv_zergBuilderRed;
unit gv_zergBuilderBlue;
string gv_mapstructures;
region gv_cameraBounds;
int gv_terrain;
int gv_iTerrain;
point[11][3] gv_pointArray;
region[11] gv_regionArray;
int gv_allUpgrades;
int gv_allAbilities;

void InitGlobals () {
    int init_i;
    int init_j;
    int init_k;

    gv_timer = TimerCreate();
    gv_timerWindow = c_timerWindowNone;
    gv_player2 = 1;
    gv_computer = 9;
    gv__15 = 1;
    for (init_i = 0; init_i <= 60; init_i += 1) {
        for (init_j = 0; init_j <= 1; init_j += 1) {
            gv_buttonUnit[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 100; init_i += 1) {
        gv_upgradeLevel[init_i] = -1;
    }
    for (init_i = 0; init_i <= 100; init_i += 1) {
        for (init_j = 0; init_j <= 1; init_j += 1) {
            gv_buttonUpgrade[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 100; init_i += 1) {
        for (init_j = 0; init_j <= 1; init_j += 1) {
            gv_buttonUpgradeImage[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    gv_dialogAttack = c_invalidDialogId;
    gv_buttonAttack = c_invalidDialogControlId;
    gv_buttonRespawn = c_invalidDialogControlId;
    gv_buttonPause = c_invalidDialogControlId;
    gv_buttonEnergy = c_invalidDialogControlId;
    gv_buttonUpgrades = c_invalidDialogControlId;
    gv_buttonSaveSubmenu2 = c_invalidDialogControlId;
    gv_buttonLoadSubmenu2 = c_invalidDialogControlId;
    gv_buttonVision = c_invalidDialogControlId;
    gv_buttonBack = c_invalidDialogControlId;
    gv_buttonOptionsSubmenuCopy = c_invalidDialogControlId;
    gv_buttonTerrainSubmenuCopy = c_invalidDialogControlId;
    gv_dialogPanel = c_invalidDialogId;
    gv_dialogCreator = c_invalidDialogId;
    gv_buttonOptionsSubmenu = c_invalidDialogControlId;
    gv_buttonTerrainSubmenu = c_invalidDialogControlId;
    gv_buttonMirror = c_invalidDialogControlId;
    gv_buttonSaveSubmenu = c_invalidDialogControlId;
    gv_buttonLoadSubmenu = c_invalidDialogControlId;
    gv_buttonRedo = c_invalidDialogControlId;
    gv_buttonDelete = c_invalidDialogControlId;
    gv_buttonClear = c_invalidDialogControlId;
    gv_buttonSwitch = c_invalidDialogControlId;
    gv_buttonStart = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 3; init_i += 1) {
        for (init_j = 0; init_j <= 1; init_j += 1) {
            for (init_k = 0; init_k <= 1; init_k += 1) {
                gv_dialogUnits[init_i][init_j][init_k] = c_invalidDialogId;
            }
        }
    }
    for (init_i = 0; init_i <= 1; init_i += 1) {
        gv_dialogRace[init_i] = c_invalidDialogId;
    }
    for (init_i = 0; init_i <= 1; init_i += 1) {
        gv_dialogPlayer[init_i] = c_invalidDialogId;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        for (init_j = 0; init_j <= 1; init_j += 1) {
            gv_buttonRace[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    gv_dialogTerrainSubmenu = c_invalidDialogId;
    for (init_i = 0; init_i <= 10; init_i += 1) {
        gv_buttonTerrain[init_i] = c_invalidDialogControlId;
    }
    gv_dialogSaveSubmenu = c_invalidDialogId;
    for (init_i = 0; init_i <= 9; init_i += 1) {
        gv_buttonSave[init_i] = c_invalidDialogControlId;
    }
    gv_dialogLoadSubmenu = c_invalidDialogId;
    for (init_i = 0; init_i <= 9; init_i += 1) {
        gv_buttonLoad[init_i] = c_invalidDialogControlId;
    }
    gv_dialogFilenameSubmenu = c_invalidDialogId;
    gv_editBox = c_invalidDialogControlId;
    gv_buttonOK = c_invalidDialogControlId;
    gv_buttonCancel = c_invalidDialogControlId;
    gv_buttonClose = c_invalidDialogControlId;
    gv_dialogOptions = c_invalidDialogId;
    for (init_i = 0; init_i <= 1; init_i += 1) {
        gv_buttonOptionVision[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_buttonOptionUpgrade[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 1; init_i += 1) {
        gv_buttonOptionAbility[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 1; init_i += 1) {
        gv_buttonOptionEnergy[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 1; init_i += 1) {
        gv_buttonOptionInstant[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 1; init_i += 1) {
        gv_buttonOptionCreep[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 1; init_i += 1) {
        gv_buttonOptionPanel[init_i] = c_invalidDialogControlId;
    }
    gv_dialogAlliances = c_invalidDialogId;
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_checkboxRed[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_checkboxBlue[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_checkbox[init_i] = c_invalidDialogControlId;
    }
    gv_buttonY = 80;
    gv_leaderboard = c_boardNone;
    gv_revealers = true;
    gv_energy = true;
    gv_instant = true;
    gv_fastCreep = true;
    for (init_i = 0; init_i <= 9; init_i += 1) {
        for (init_j = 0; init_j <= 2; init_j += 1) {
            gv_stateUnits[init_i][init_j] = "";
        }
    }
    for (init_i = 0; init_i <= 9; init_i += 1) {
        gv_stateUpgrades[init_i] = "";
    }
    gv_zergBuilderRed = UnitFromId(112);
    gv_zergBuilderBlue = UnitFromId(115);
    gv_mapstructures = "";
    gv_cameraBounds = RegionFromId(1);
    gv_terrain = 1;
    gv_iTerrain = 1;
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_ButtonVision ();
void gf_ButtonUpgrades ();
void gf_Energy ();
void gf_ResetUnits ();
void gf_Revealers ();
void gf_RevealersOn ();
void gf_RevealersOff ();
bool gf_NoUnitsRed ();
bool gf_NoUnitsBlue ();
void gf_CreateUnit ();
void gf_CreateUpgrade ();
void gf_Races ();
void gf_Mirror ();
void gf_DeleteAll ();
void gf_ShowhideTerrainSubmenu ();
void gf_ShowhideSaveSubmenu ();
void gf_ShowhideLoadSubmenu ();
void gf_ShowhideOptionsAlliances ();
bool gf_AttackActions ();
bool gf_CreatorActions ();
bool gf_UnitDialogActions ();
bool gf_SubmenusActions ();
void gf_HideUnitDialog ();
void gf_HideSubmenus ();
void gf_HideAllDialogs ();
void gf_ShowAllDialogs ();
void gf_MoveCameras ();
bool gf_CreatorMode ();
bool gf_AttackMode ();
bool gf_PlayerhasPermission ();
void gf_HighlightButton (int lp_inputDialogItem, bool lp_highlightMode);
void gf_DatabaseTerrain ();
void gf_DatabaseUnits ();
void gf_DatabaseResearch ();
void gf_GetUnitDataAuto (string lp_inputUnitLink);
void gf_GetUnitDataManual (string lp_inputUnitLink, int lp_inputUnitMinerals, int lp_inputUnitVespene);
void gf_GetResearchDataManual (string lp_inputResearchLink, string lp_inputImageLink, string lp_inputTextLink, int lp_inputResearchTypeLevel, string lp_ability, string lp_array);
int gf_convertiplayertocomputer ();
int gf_convertiplayertoplayer ();
int gf_convertcomputertoiplayer (int lp_inputComputer);
text gf_convertiplayertocolor ();
point gf_convertiplayertopoint ();
point gf_convertcomputertopoint ();
string gf_ConvertUnitTypeStructuretoIcon (string lp_inputUnitLink);
void gf_CreateDialogs ();
void gf_Createbuttonsforattack ();
void gf_Createbuttonsforcreator ();
void gf_Createbuttonsforunits ();
void gf_Createbuttonsforresearch ();
void gf_Createbuttonsforraces ();
void gf_Createbuttonsforplayer ();
void gf_Createbuttonsforsubmenuterrain ();
void gf_Createbuttonsforsubmenusave ();
void gf_Createbuttonsforsubmenuload ();
void gf_Createbuttonsforsubmenuoptions ();
void gf_Createbuttonsforsubmenualliances ();
void gf_Createbuttonsforsubmenufilename ();
void gf_Colorbuttonsredblue (int lp_inputDialogItem, int lp_inputIPlayer);
void gf_Createbuttonoff ();
void gf_Createbuttonon ();
void gf_Createobserverpanel ();
void gf_InitLeaderboard ();
bool gf_ValidUnitType (string lp_inputUnitType);
int gf_AddLeaderboardRow (string lp_inputUnitName);
void gf_AddLeaderboardIcon (string lp_inputUnitType, int lp_inputColumn, int lp_inputRow);
bool gf_SpecialUnitType (string lp_inputUnitType);
void gf_SpecialUnitCost (string lp_inputUnitType, int lp_inputColumn, bool lp_deleteMode);
void gf_FadeButtons ();
void gf_OptionsAction ();
void gf_AlliancesAction ();
void gf_FastCreepOn ();
void gf_FastCreepOff ();
void gf_ButtonSave (int lp_inputslot);
void gf_SaveState (int lp_inputslot);
void gf_SaveDescription ();
void gf_SaveTerrain (int lp_inputslot);
void gf_SaveUnits (int lp_inputslot);
void gf_SaveUpgrades (int lp_inputslot);
void gf_ButtonLoad ();
void gf_LoadState (int lp_inputslot);
void gf_LoadTerrain (int lp_inputterrain);
void gf_LoadUnits (string lp_inputstring, int lp_inputowner);
void gf_LoadUpgrades (string lp_inputstring);
void gf_SavetoBank (int lp_inputslot);
void gf_InitializeBank ();
void gf_StoreStringLong (string lp_inputString, string lp_inputKey, string lp_inputSection, bank lp_inputBank);
string gf_LoadStringLong (string lp_inputKey, string lp_inputSection, bank lp_inputBank);
void gf_ClearState (int lp_inputslot);
void gf_RemoveNeutralStructures ();
void gf_SaveMapStructures ();
void gf_RestoreMapStructures ();
void gf_TerrainChanger ();
void gf_UpgradesOn ();
void gf_UpgradesOff ();
void gf_UpgradeLvl ();
void gf_UpgradeLvlShowNext ();
void gf_UpgradeLvlReset ();
void gf_UpgradeLvlResetAll ();
void gf_AllAbilitiesOn ();
void gf_AllAbilitiesOff ();

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_InitializeMap;
trigger gt_InitializeData;
trigger gt_Back;
trigger gt_Start;
trigger gt_Pause;
trigger gt_Energy;
trigger gt_Respawn;
trigger gt_Update;
trigger gt_Attack;
trigger gt_Redo;
trigger gt_Switch;
trigger gt_Delete;
trigger gt_Clear;
trigger gt_Click;
trigger gt_UnitCreated;
trigger gt_UnitDies;
trigger gt_CtrlToggleOff;
trigger gt_CtrlToggleOn;
trigger gt_ShiftToggleOff;
trigger gt_ShiftToggleOn;
trigger gt_InstantTraining;
trigger gt_InstantConstruction;
trigger gt_PlayerDeselectsAnyBuilder;
trigger gt_PlayerSelectsZergBuilder;
trigger gt_TacNukeStrike;
trigger gt_CreateNeutralStructure;

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
void gf_ButtonVision () {
    // Implementation
    if ((gv_revealers == true)) {
        gf_RevealersOff();
    }
    else {
        gf_RevealersOn();
    }
}

void gf_ButtonUpgrades () {
    // Implementation
    if ((gv_shiftToggle == false) && (gv_allAbilities == 0)) {
        gf_AllAbilitiesOn();
    }
    else if ((gv_shiftToggle == false) && (gv_allAbilities == 1)) {
        gf_AllAbilitiesOff();
    }
    else if ((gv_shiftToggle == true) && (gv_allUpgrades < 3)) {
        gv_allUpgrades = 3;
        gf_UpgradeLvl();
    }
    else if ((gv_shiftToggle == true) && (gv_allUpgrades == 3)) {
        gv_allUpgrades = 0;
        gf_UpgradeLvlResetAll();
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (StringExternal("Param/Value/94833475")));
    }
}

trigger auto_gf_Energy_Trigger = null;

void gf_Energy () {
    if (auto_gf_Energy_Trigger == null) {
        auto_gf_Energy_Trigger = TriggerCreate("auto_gf_Energy_TriggerFunc");
    }

    TriggerExecute(auto_gf_Energy_Trigger, false, false);
}

bool auto_gf_Energy_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_interceptorcount;

    // Variable Initialization

    // Implementation
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, (1 << (c_targetFilterHasEnergy - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropEnergyPercent, 100.0);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Corruptor", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_UnitAbilityRemoveCooldown(UnitGroupLoopCurrent(), "Corruption", "Abil/Corruption");
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Stalker", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_UnitAbilityRemoveCooldown(UnitGroupLoopCurrent(), "Blink", "Blink");
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Carrier", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        lv_interceptorcount = UnitMagazineCount(UnitGroupLoopCurrent(), "CarrierHangar");
        UnitMagazineArm(UnitGroupLoopCurrent(), AbilityCommand("CarrierHangar", 0), (8 - lv_interceptorcount));
    }
    UnitGroupLoopEnd();
    return true;
}

void gf_ResetUnits () {
    // Variable Declarations
    fixed lv_time;

    // Variable Initialization

    // Implementation
    gf_HideSubmenus();
    gf_DeleteAll();
    if ((gv_pause == true)) {
        TriggerExecute(gt_Pause, false, false);
    }
    else {
    }
    gf_LoadState(0);
    UnitControlGroupAddUnits(1, 1, UnitGroup(null, 9, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0));
    UnitControlGroupAddUnits(gv_player2, 2, UnitGroup(null, 10, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0));
    if (gf_CreatorMode()) {
        UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            libNtve_gf_MakeUnitUncommandable(UnitGroupLoopCurrent(), true);
        }
        UnitGroupLoopEnd();
    }
    else {
    }
    UnitGroupLoopBegin(UnitGroup("Carrier", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitMagazineArm(UnitGroupLoopCurrent(), AbilityCommand("CarrierHangar", 0), 4);
        lv_time = 0.1;
    }
    UnitGroupLoopEnd();
    Wait(lv_time, c_timeGame);
    if ((gv_energy == true)) {
        gf_Energy();
    }
    else {
    }
    gf_MoveCameras();
    TimerRestart(gv_timer);
}

void gf_Revealers () {
    playergroup auto28A67553_g;
    int auto28A67553_p;

    // Implementation
    auto28A67553_g = PlayerGroupActive(); 
    auto28A67553_p = 1;
    for ( ; auto28A67553_p <= PlayerGroupCount(auto28A67553_g) ; auto28A67553_p += BoolToInt(gv_iPlayer == PlayerGroupPlayer(auto28A67553_g, auto28A67553_p)) ) {
        gv_iPlayer = PlayerGroupPlayer(auto28A67553_g, auto28A67553_p);
        VisRevealerDestroy(gv_revealer[gv_iPlayer]);
        VisRevealerCreate(gv_iPlayer, gv_cameraBounds);
        gv_revealer[gv_iPlayer] = VisRevealerLastCreated();
    }
    if ((gv_revealers == false)) {
        gf_RevealersOff();
    }
    else {
    }
}

void gf_RevealersOn () {
    playergroup autoA8C8EF5D_g;
    int autoA8C8EF5D_p;

    // Implementation
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, StringExternal("Param/Value/6DD40EFC"));
    gv_revealers = true;
    autoA8C8EF5D_g = PlayerGroupActive(); 
    autoA8C8EF5D_p = 1;
    for ( ; autoA8C8EF5D_p <= PlayerGroupCount(autoA8C8EF5D_g) ; autoA8C8EF5D_p += BoolToInt(gv_iPlayer == PlayerGroupPlayer(autoA8C8EF5D_g, autoA8C8EF5D_p)) ) {
        gv_iPlayer = PlayerGroupPlayer(autoA8C8EF5D_g, autoA8C8EF5D_p);
        VisRevealerEnable(gv_revealer[gv_iPlayer], true);
    }
}

void gf_RevealersOff () {
    playergroup autoCDCF764E_g;
    int autoCDCF764E_p;

    // Implementation
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, StringExternal("Param/Value/07CB8069"));
    gv_revealers = false;
    autoCDCF764E_g = PlayerGroupActive(); 
    autoCDCF764E_p = 1;
    for ( ; autoCDCF764E_p <= PlayerGroupCount(autoCDCF764E_g) ; autoCDCF764E_p += BoolToInt(gv_iPlayer == PlayerGroupPlayer(autoCDCF764E_g, autoCDCF764E_p)) ) {
        gv_iPlayer = PlayerGroupPlayer(autoCDCF764E_g, autoCDCF764E_p);
        VisRevealerEnable(gv_revealer[gv_iPlayer], false);
    }
}

bool gf_NoUnitsRed () {
    // Implementation
    if ((UnitGroupCount(UnitGroup(null, 9, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), c_unitCountAlive) == 0)) {
        return true;
    }
    else {
        return false;
    }
}

bool gf_NoUnitsBlue () {
    // Implementation
    if ((UnitGroupCount(UnitGroup(null, 10, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), c_unitCountAlive) == 0)) {
        return true;
    }
    else {
        return false;
    }
}

void gf_CreateUnit () {
    // Implementation
    libNtve_gf_CreateUnitsWithDefaultFacing(gv__15, gv_unitLink[gv_iUnit], 0, gf_convertiplayertocomputer(), gf_convertiplayertopoint());
    UnitClearSelection(EventPlayer());
    UnitGroupSelect(UnitLastCreatedGroup(), EventPlayer(), true);
    UnitControlGroupAddUnits(EventPlayer(), gf_convertiplayertoplayer(), UnitLastCreatedGroup());
    UnitGroupLoopBegin(UnitLastCreatedGroup());
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_MakeUnitUncommandable(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (IntToText(gv__15) + StringExternal("Param/Value/09C0C378") + gv_unitName[gv_iUnit] + StringExternal("Param/Value/AAE7F931") + gf_convertiplayertocolor()));
}

void gf_CreateUpgrade () {
    // Implementation
    if ((gv_upgradeLevel[gv_iUnit] == 0) && (gv_upgradeFlag[gv_iUnit][gv_iPlayer] == true)) {
        gf_UpgradesOff();
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (gv_upgradeName[gv_iUnit] + StringExternal("Param/Value/2E321D1F") + gf_convertiplayertocolor()));
    }
    else if ((gv_upgradeLevel[gv_iUnit] == 0) && (gv_upgradeFlag[gv_iUnit][gv_iPlayer] == false)) {
        gf_UpgradesOn();
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (gv_upgradeName[gv_iUnit] + StringExternal("Param/Value/3615AAF0") + gf_convertiplayertocolor()));
    }
    else if ((gv_upgradeLevel[gv_iUnit] == 1)) {
        gf_UpgradeLvlShowNext();
        gf_UpgradesOn();
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (gv_upgradeName[gv_iUnit] + StringExternal("Param/Value/24003645") + gf_convertiplayertocolor()));
    }
    else if ((gv_upgradeLevel[gv_iUnit] == 2)) {
        gf_UpgradeLvlShowNext();
        gf_UpgradesOn();
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (gv_upgradeName[gv_iUnit] + StringExternal("Param/Value/C130424E") + gf_convertiplayertocolor()));
    }
    else if ((gv_upgradeLevel[gv_iUnit] == 3) && (gv_upgradeFlag[gv_iUnit][gv_iPlayer] == false)) {
        gf_UpgradesOn();
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (gv_upgradeName[gv_iUnit] + StringExternal("Param/Value/A28B763A") + gf_convertiplayertocolor()));
    }
    else if ((gv_upgradeLevel[gv_iUnit] == 3) && (gv_upgradeFlag[gv_iUnit][gv_iPlayer] == true)) {
        gf_UpgradeLvlShowNext();
        gf_UpgradeLvlReset();
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (gv_upgradeName[gv_iUnit] + StringExternal("Param/Value/9C615906") + gf_convertiplayertocolor()));
    }
}

void gf_Races () {
    // Implementation
    if ((gv_currentRace[gv_iPlayer] == gv_iRace) && (gv_currentTech[gv_iPlayer] == 0)) {
        gv_currentTech[gv_iPlayer] = 1;
    }
    else {
        gv_currentTech[gv_iPlayer] = 0;
        gv_currentRace[gv_iPlayer] = gv_iRace;
    }
    gf_HideUnitDialog();
    DialogSetVisible(gv_dialogUnits[gv_currentRace[gv_iPlayer]][gv_currentTech[gv_iPlayer]][gv_iPlayer], PlayerGroupActive(), true);
}

void gf_Mirror () {
    // Variable Declarations
    int lv_currentcomputer;
    int lv_othercomputer;
    point lv_otherpoint;
    int lv_othercontrolgroup;
    int lv_otherplayer;

    // Variable Initialization
    lv_currentcomputer = gv_computer;

    // Implementation
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, StringExternal("Param/Value/0D9105C6"));
    DialogControlSetEnabled(gv_buttonMirror, PlayerGroupActive(), false);
    Wait(0.1, c_timeGame);
    if ((gv_computer == 9)) {
        lv_othercomputer = 10;
        lv_otherpoint = PointFromId(107);
        lv_othercontrolgroup = 2;
        lv_otherplayer = gv_player2;
    }
    else {
        lv_othercomputer = 9;
        lv_otherpoint = PointFromId(106);
        lv_othercontrolgroup = 1;
        lv_otherplayer = 1;
    }
    UnitGroupLoopBegin(UnitGroup(null, lv_othercomputer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitKill(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, lv_currentcomputer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, UnitGetType(UnitGroupLoopCurrent()), 0, lv_othercomputer, lv_otherpoint);
        libNtve_gf_MakeUnitUncommandable(UnitLastCreated(), true);
        UnitControlGroupAddUnit(lv_otherplayer, lv_othercontrolgroup, UnitLastCreated());
    }
    UnitGroupLoopEnd();
    gv_computer = lv_othercomputer;
    Wait(1.0, c_timeGame);
    DialogControlSetEnabled(gv_buttonMirror, PlayerGroupActive(), true);
    UIClearMessages(PlayerGroupActive(), c_messageAreaSubtitle);
}

void gf_DeleteAll () {
    int auto10ECF298_n;
    int auto10ECF298_i;

    // Implementation
    gf_RemoveNeutralStructures();
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, 0, (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "Bunker")) {
            auto10ECF298_n = 6;
            for (auto10ECF298_i = 1; auto10ECF298_i <= auto10ECF298_n; auto10ECF298_i += 1) {
                if ((UnitCargo(UnitGroupLoopCurrent(), 1) == null)) {
                }
                else {
                    UnitRemove(UnitCargo(UnitGroupLoopCurrent(), 1));
                }
            }
        }
        else {
        }
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Broodling", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("BroodlingEscort", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
}

void gf_ShowhideTerrainSubmenu () {
    // Implementation
    if ((DialogIsVisible(gv_dialogTerrainSubmenu, 1) == true)) {
        gf_HideSubmenus();
    }
    else {
        gf_HideSubmenus();
        DialogSetVisible(gv_dialogTerrainSubmenu, PlayerGroupActive(), true);
        gf_HighlightButton(gv_buttonTerrainSubmenu, true);
        gf_HighlightButton(gv_buttonTerrainSubmenuCopy, true);
    }
}

void gf_ShowhideSaveSubmenu () {
    // Implementation
    if ((DialogIsVisible(gv_dialogSaveSubmenu, 1) == true)) {
        gf_HideSubmenus();
    }
    else {
        gf_HideSubmenus();
        DialogSetVisible(gv_dialogSaveSubmenu, PlayerGroupActive(), true);
        gf_HighlightButton(gv_buttonSaveSubmenu, true);
    }
}

void gf_ShowhideLoadSubmenu () {
    // Implementation
    if ((DialogIsVisible(gv_dialogLoadSubmenu, 1) == true)) {
        gf_HideSubmenus();
    }
    else {
        gf_HideSubmenus();
        DialogSetVisible(gv_dialogLoadSubmenu, PlayerGroupActive(), true);
        gf_HighlightButton(gv_buttonLoadSubmenu, true);
    }
}

void gf_ShowhideOptionsAlliances () {
    // Implementation
    if ((DialogIsVisible(gv_dialogOptions, 1) == true)) {
        gf_HideSubmenus();
        if ((DialogIsVisible(gv_dialogCreator, 1) == true)) {
            gf_ShowAllDialogs();
        }
        else {
        }
    }
    else {
        if ((DialogIsVisible(gv_dialogCreator, 1) == true)) {
            gf_HideAllDialogs();
            DialogSetVisible(gv_dialogCreator, PlayerGroupActive(), true);
        }
        else {
            gf_HideAllDialogs();
            DialogSetVisible(gv_dialogAttack, PlayerGroupActive(), true);
        }
        DialogSetVisible(gv_dialogOptions, PlayerGroupActive(), true);
        DialogSetVisible(gv_dialogAlliances, PlayerGroupActive(), true);
        gf_HighlightButton(gv_buttonOptionsSubmenu, true);
        gf_HighlightButton(gv_buttonOptionsSubmenuCopy, true);
        gf_FadeButtons();
    }
}

bool gf_AttackActions () {
    int autoF879C59F_val;

    // Implementation
    autoF879C59F_val = EventDialogControl();
    if (autoF879C59F_val == gv_buttonOptionsSubmenuCopy) {
        gf_ShowhideOptionsAlliances();
    }
    else if (autoF879C59F_val == gv_buttonTerrainSubmenuCopy) {
        gf_ShowhideTerrainSubmenu();
    }
    else if (autoF879C59F_val == gv_buttonSaveSubmenu2) {
        gf_ShowhideSaveSubmenu();
    }
    else if (autoF879C59F_val == gv_buttonLoadSubmenu2) {
        gf_ShowhideLoadSubmenu();
    }
    else if (autoF879C59F_val == gv_buttonAttack) {
        TriggerExecute(gt_Attack, true, true);
    }
    else if (autoF879C59F_val == gv_buttonEnergy) {
        TriggerExecute(gt_Energy, true, false);
    }
    else if (autoF879C59F_val == gv_buttonPause) {
        TriggerExecute(gt_Pause, true, true);
    }
    else if (autoF879C59F_val == gv_buttonRespawn) {
        TriggerExecute(gt_Respawn, true, true);
    }
    else if (autoF879C59F_val == gv_buttonUpgrades) {
        gf_ButtonUpgrades();
    }
    else if (autoF879C59F_val == gv_buttonVision) {
        gf_ButtonVision();
    }
    else if (autoF879C59F_val == gv_buttonBack) {
        TriggerExecute(gt_Back, true, true);
    }
    else {
        return false;
    }
    return true;
}

bool gf_CreatorActions () {
    int auto81D24796_val;

    // Implementation
    auto81D24796_val = EventDialogControl();
    if (auto81D24796_val == gv_buttonOptionsSubmenu) {
        gf_ShowhideOptionsAlliances();
    }
    else if (auto81D24796_val == gv_buttonStart) {
        TriggerExecute(gt_Start, true, true);
    }
    else if (auto81D24796_val == gv_buttonTerrainSubmenu) {
        gf_ShowhideTerrainSubmenu();
    }
    else if (auto81D24796_val == gv_buttonRedo) {
        TriggerExecute(gt_Redo, true, true);
    }
    else if (auto81D24796_val == gv_buttonSwitch) {
        TriggerExecute(gt_Switch, true, true);
    }
    else if (auto81D24796_val == gv_buttonClear) {
        TriggerExecute(gt_Clear, true, true);
    }
    else if (auto81D24796_val == gv_buttonMirror) {
        gf_Mirror();
    }
    else if (auto81D24796_val == gv_buttonSaveSubmenu) {
        gf_ShowhideSaveSubmenu();
    }
    else if (auto81D24796_val == gv_buttonLoadSubmenu) {
        gf_ShowhideLoadSubmenu();
    }
    else {
        return false;
    }
    return true;
}

bool gf_UnitDialogActions () {
    int autoA5E755DC_ae;
    int autoA5E755DC_ai;
    int auto291849D3_ae;
    int auto291849D3_ai;
    int auto9F84AB12_ae;
    int auto9F84AB12_ai;
    int autoC97170BA_ae;
    int autoC97170BA_ai;
    int auto66A32A41_ae;
    int auto66A32A41_ai;
    int auto5FD784F6_ae;
    int auto5FD784F6_ai;

    // Implementation
    autoA5E755DC_ae = 1;
    autoA5E755DC_ai = 1;
    gv_iPlayer = 0;
    for ( ; ( (autoA5E755DC_ai >= 0 && gv_iPlayer <= autoA5E755DC_ae) || (autoA5E755DC_ai <= 0 && gv_iPlayer >= autoA5E755DC_ae) ) ; gv_iPlayer += autoA5E755DC_ai ) {
        auto291849D3_ae = 60;
        auto291849D3_ai = 1;
        gv_iUnit = 0;
        for ( ; ( (auto291849D3_ai >= 0 && gv_iUnit <= auto291849D3_ae) || (auto291849D3_ai <= 0 && gv_iUnit >= auto291849D3_ae) ) ; gv_iUnit += auto291849D3_ai ) {
            if ((EventDialogControl() == gv_buttonUnit[gv_iUnit][gv_iPlayer])) {
                gf_CreateUnit();
                return true;
            }
            else {
            }
        }
    }
    auto9F84AB12_ae = 1;
    auto9F84AB12_ai = 1;
    gv_iPlayer = 0;
    for ( ; ( (auto9F84AB12_ai >= 0 && gv_iPlayer <= auto9F84AB12_ae) || (auto9F84AB12_ai <= 0 && gv_iPlayer >= auto9F84AB12_ae) ) ; gv_iPlayer += auto9F84AB12_ai ) {
        autoC97170BA_ae = 3;
        autoC97170BA_ai = 1;
        gv_iRace = 1;
        for ( ; ( (autoC97170BA_ai >= 0 && gv_iRace <= autoC97170BA_ae) || (autoC97170BA_ai <= 0 && gv_iRace >= autoC97170BA_ae) ) ; gv_iRace += autoC97170BA_ai ) {
            if ((EventDialogControl() == gv_buttonRace[gv_iRace][gv_iPlayer])) {
                gf_Races();
                return true;
            }
            else {
            }
        }
    }
    auto66A32A41_ae = 1;
    auto66A32A41_ai = 1;
    gv_iPlayer = 0;
    for ( ; ( (auto66A32A41_ai >= 0 && gv_iPlayer <= auto66A32A41_ae) || (auto66A32A41_ai <= 0 && gv_iPlayer >= auto66A32A41_ae) ) ; gv_iPlayer += auto66A32A41_ai ) {
        auto5FD784F6_ae = 99;
        auto5FD784F6_ai = 1;
        gv_iUnit = 0;
        for ( ; ( (auto5FD784F6_ai >= 0 && gv_iUnit <= auto5FD784F6_ae) || (auto5FD784F6_ai <= 0 && gv_iUnit >= auto5FD784F6_ae) ) ; gv_iUnit += auto5FD784F6_ai ) {
            if ((EventDialogControl() == gv_buttonUpgrade[gv_iUnit][gv_iPlayer])) {
                gf_CreateUpgrade();
                return true;
            }
            else {
            }
        }
    }
    return false;
}

bool gf_SubmenusActions () {
    int auto47C74250_ae;
    int auto47C74250_ai;
    int autoBF09CC20_ae;
    int autoBF09CC20_ai;
    int auto64E50384_ae;
    int auto64E50384_ai;

    // Implementation
    if ((DialogIsVisible(gv_dialogTerrainSubmenu, 1) == true)) {
        auto47C74250_ae = 10;
        auto47C74250_ai = 1;
        gv_iTerrain = 1;
        for ( ; ( (auto47C74250_ai >= 0 && gv_iTerrain <= auto47C74250_ae) || (auto47C74250_ai <= 0 && gv_iTerrain >= auto47C74250_ae) ) ; gv_iTerrain += auto47C74250_ai ) {
            if ((EventDialogControl() == gv_buttonTerrain[gv_iTerrain])) {
                gf_TerrainChanger();
                return true;
            }
            else {
            }
        }
    }
    else if ((DialogIsVisible(gv_dialogFilenameSubmenu, 1) == true)) {
        gf_SaveDescription();
        return true;
    }
    else if ((DialogIsVisible(gv_dialogSaveSubmenu, 1) == true) && gf_PlayerhasPermission()) {
        autoBF09CC20_ae = 9;
        autoBF09CC20_ai = 1;
        gv_iSlot = 0;
        for ( ; ( (autoBF09CC20_ai >= 0 && gv_iSlot <= autoBF09CC20_ae) || (autoBF09CC20_ai <= 0 && gv_iSlot >= autoBF09CC20_ae) ) ; gv_iSlot += autoBF09CC20_ai ) {
            if ((EventDialogControl() == gv_buttonSave[gv_iSlot])) {
                gf_ButtonSave(gv_iSlot);
                return true;
            }
            else {
            }
        }
    }
    else if ((DialogIsVisible(gv_dialogLoadSubmenu, 1) == true) && gf_PlayerhasPermission()) {
        auto64E50384_ae = 9;
        auto64E50384_ai = 1;
        gv_iSlot = 0;
        for ( ; ( (auto64E50384_ai >= 0 && gv_iSlot <= auto64E50384_ae) || (auto64E50384_ai <= 0 && gv_iSlot >= auto64E50384_ae) ) ; gv_iSlot += auto64E50384_ai ) {
            if ((EventDialogControl() == gv_buttonLoad[gv_iSlot])) {
                gf_ButtonLoad();
                return true;
            }
            else {
            }
        }
    }
    else if ((DialogIsVisible(gv_dialogOptions, 1) == true)) {
        gf_OptionsAction();
        return true;
    }
    return false;
}

void gf_HideUnitDialog () {
    int autoF6A811A2_ae;
    int autoF6A811A2_ai;
    int auto8F0B0D72_ae;
    int auto8F0B0D72_ai;

    // Variable Declarations
    int lv_i1;
    int lv_i2;

    // Variable Initialization

    // Implementation
    autoF6A811A2_ae = 1;
    autoF6A811A2_ai = 1;
    gv_iTech = 0;
    for ( ; ( (autoF6A811A2_ai >= 0 && gv_iTech <= autoF6A811A2_ae) || (autoF6A811A2_ai <= 0 && gv_iTech >= autoF6A811A2_ae) ) ; gv_iTech += autoF6A811A2_ai ) {
        auto8F0B0D72_ae = 3;
        auto8F0B0D72_ai = 1;
        gv_iRace = 1;
        for ( ; ( (auto8F0B0D72_ai >= 0 && gv_iRace <= auto8F0B0D72_ae) || (auto8F0B0D72_ai <= 0 && gv_iRace >= auto8F0B0D72_ae) ) ; gv_iRace += auto8F0B0D72_ai ) {
            DialogSetVisible(gv_dialogUnits[gv_iRace][gv_iTech][gv_iPlayer], PlayerGroupActive(), false);
        }
    }
}

void gf_HideSubmenus () {
    // Implementation
    DialogSetVisible(gv_dialogTerrainSubmenu, PlayerGroupActive(), false);
    DialogSetVisible(gv_dialogSaveSubmenu, PlayerGroupActive(), false);
    DialogSetVisible(gv_dialogLoadSubmenu, PlayerGroupActive(), false);
    DialogSetVisible(gv_dialogFilenameSubmenu, PlayerGroupActive(), false);
    DialogSetVisible(gv_dialogOptions, PlayerGroupActive(), false);
    DialogSetVisible(gv_dialogAlliances, PlayerGroupActive(), false);
    gf_HighlightButton(gv_buttonTerrainSubmenu, false);
    gf_HighlightButton(gv_buttonTerrainSubmenuCopy, false);
    gf_HighlightButton(gv_buttonSaveSubmenu, false);
    gf_HighlightButton(gv_buttonLoadSubmenu, false);
    gf_HighlightButton(gv_buttonOptionsSubmenu, false);
    gf_HighlightButton(gv_buttonOptionsSubmenuCopy, false);
}

void gf_HideAllDialogs () {
    int auto584220B6_ae;
    int auto584220B6_ai;

    // Implementation
    gf_HideSubmenus();
    DialogSetVisible(gv_dialogAttack, PlayerGroupActive(), false);
    DialogSetVisible(gv_dialogCreator, PlayerGroupActive(), false);
    auto584220B6_ae = 1;
    auto584220B6_ai = 1;
    gv_iPlayer = 0;
    for ( ; ( (auto584220B6_ai >= 0 && gv_iPlayer <= auto584220B6_ae) || (auto584220B6_ai <= 0 && gv_iPlayer >= auto584220B6_ae) ) ; gv_iPlayer += auto584220B6_ai ) {
        gf_HideUnitDialog();
        DialogSetVisible(gv_dialogRace[gv_iPlayer], PlayerGroupActive(), false);
        DialogSetVisible(gv_dialogPlayer[gv_iPlayer], PlayerGroupActive(), false);
    }
}

void gf_ShowAllDialogs () {
    int auto6BD13678_ae;
    int auto6BD13678_ai;

    // Implementation
    DialogSetVisible(gv_dialogCreator, PlayerGroupActive(), true);
    auto6BD13678_ae = 1;
    auto6BD13678_ai = 1;
    gv_iPlayer = 0;
    for ( ; ( (auto6BD13678_ai >= 0 && gv_iPlayer <= auto6BD13678_ae) || (auto6BD13678_ai <= 0 && gv_iPlayer >= auto6BD13678_ae) ) ; gv_iPlayer += auto6BD13678_ai ) {
        DialogSetVisible(gv_dialogRace[gv_iPlayer], PlayerGroupActive(), true);
        DialogSetVisible(gv_dialogUnits[gv_currentRace[gv_iPlayer]][gv_currentTech[gv_iPlayer]][gv_iPlayer], PlayerGroupActive(), true);
    }
}

void gf_MoveCameras () {
    playergroup auto90786553_g;
    int auto90786553_p;

    // Implementation
    auto90786553_g = PlayerGroupActive(); 
    auto90786553_p = 1;
    for ( ; auto90786553_p <= PlayerGroupCount(auto90786553_g) ; auto90786553_p += BoolToInt(gv_iPlayer == PlayerGroupPlayer(auto90786553_g, auto90786553_p)) ) {
        gv_iPlayer = PlayerGroupPlayer(auto90786553_g, auto90786553_p);
        CameraPan(gv_iPlayer, RegionGetCenter(gv_cameraBounds), 1.0, -1, 10, false);
    }
}

bool gf_CreatorMode () {
    // Implementation
    if ((DialogIsVisible(gv_dialogCreator, 1) == true)) {
        return true;
    }
    else {
        return false;
    }
}

bool gf_AttackMode () {
    // Implementation
    if ((DialogIsVisible(gv_dialogAttack, 1) == true)) {
        return true;
    }
    else {
        return false;
    }
}

bool gf_PlayerhasPermission () {
    // Implementation
    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropCredits) == 1)) {
        return true;
    }
    else {
        return false;
    }
}

void gf_HighlightButton (int lp_inputDialogItem, bool lp_highlightMode) {
    // Implementation
    if ((lp_highlightMode == true)) {
        libNtve_gf_SetDialogItemImage(lp_inputDialogItem, "Assets\\Textures\\ui_generic_button_normaloverpressedover_zerg.dds", PlayerGroupActive());
        libNtve_gf_SetDialogItemImage2(lp_inputDialogItem, "Assets\\Textures\\ui_generic_button_normaloverpressedover_zerg.dds", PlayerGroupActive());
    }
    else {
        libNtve_gf_SetDialogItemImage(lp_inputDialogItem, "Assets\\Textures\\ui_button_generic_normalpressed_terran.dds", PlayerGroupActive());
        libNtve_gf_SetDialogItemImage2(lp_inputDialogItem, "Assets\\Textures\\ui_button_generic_normaloverpressedover_terran.dds", PlayerGroupActive());
    }
}

void gf_DatabaseTerrain () {
    // Implementation
    gv_regionArray[1] = RegionFromId(1);
    gv_regionArray[2] = RegionFromId(2);
    gv_regionArray[3] = RegionFromId(3);
    gv_regionArray[4] = RegionFromId(4);
    gv_regionArray[5] = RegionFromId(5);
    gv_regionArray[6] = RegionFromId(6);
    gv_regionArray[7] = RegionFromId(7);
    gv_regionArray[8] = RegionFromId(8);
    gv_regionArray[9] = RegionFromId(9);
    gv_regionArray[10] = RegionFromId(10);
    gv_pointArray[1][0] = PointFromId(11);
    gv_pointArray[1][1] = PointFromId(12);
    gv_pointArray[1][2] = PointFromId(13);
    gv_pointArray[2][0] = PointFromId(14);
    gv_pointArray[2][1] = PointFromId(15);
    gv_pointArray[2][2] = PointFromId(16);
    gv_pointArray[3][0] = PointFromId(17);
    gv_pointArray[3][1] = PointFromId(18);
    gv_pointArray[3][2] = PointFromId(19);
    gv_pointArray[4][0] = PointFromId(20);
    gv_pointArray[4][1] = PointFromId(21);
    gv_pointArray[4][2] = PointFromId(22);
    gv_pointArray[5][0] = PointFromId(23);
    gv_pointArray[5][1] = PointFromId(24);
    gv_pointArray[5][2] = PointFromId(25);
    gv_pointArray[6][0] = PointFromId(26);
    gv_pointArray[6][1] = PointFromId(27);
    gv_pointArray[6][2] = PointFromId(28);
    gv_pointArray[7][0] = PointFromId(29);
    gv_pointArray[7][1] = PointFromId(30);
    gv_pointArray[7][2] = PointFromId(31);
    gv_pointArray[8][0] = PointFromId(32);
    gv_pointArray[8][1] = PointFromId(33);
    gv_pointArray[8][2] = PointFromId(34);
    gv_pointArray[9][0] = PointFromId(35);
    gv_pointArray[9][1] = PointFromId(36);
    gv_pointArray[9][2] = PointFromId(37);
    gv_pointArray[10][0] = PointFromId(38);
    gv_pointArray[10][1] = PointFromId(39);
    gv_pointArray[10][2] = PointFromId(40);
}

void gf_DatabaseUnits () {
    // Implementation
    gv_iUnit = 0;
    gf_GetUnitDataAuto("Probe");
    gf_GetUnitDataAuto("Zealot");
    gf_GetUnitDataAuto("Stalker");
    gf_GetUnitDataAuto("Sentry");
    gf_GetUnitDataAuto("Adept");
    gf_GetUnitDataAuto("HighTemplar");
    gf_GetUnitDataAuto("DarkTemplar");
    gf_GetUnitDataManual("Archon", 100, 300);
    gf_GetUnitDataAuto("Observer");
    gf_GetUnitDataAuto("WarpPrism");
    gf_GetUnitDataAuto("Immortal");
    gf_GetUnitDataAuto("Colossus");
    gf_GetUnitDataAuto("Disruptor");
    gv_buttonUnitFile[(gv_iUnit - 1)] = "Assets\\Textures\\btn-unit-protoss-replicant.dds";
    gf_GetUnitDataAuto("Phoenix");
    gf_GetUnitDataAuto("VoidRay");
    gv_buttonUnitFile[(gv_iUnit - 1)] = "Assets\\Textures\\btn-unit-protoss-warpray.dds";
    gf_GetUnitDataAuto("Carrier");
    gf_GetUnitDataAuto("Tempest");
    gf_GetUnitDataAuto("Oracle");
    gf_GetUnitDataAuto("MothershipCore");
    gf_GetUnitDataAuto("Mothership");
    gv_iUnit += 1;
    gf_GetUnitDataAuto("SCV");
    gf_GetUnitDataAuto("Marine");
    gf_GetUnitDataAuto("Marauder");
    gf_GetUnitDataAuto("Reaper");
    gf_GetUnitDataAuto("Ghost");
    gf_GetUnitDataAuto("Hellion");
    gf_GetUnitDataAuto("SiegeTank");
    gf_GetUnitDataAuto("Thor");
    gf_GetUnitDataAuto("VikingFighter");
    gf_GetUnitDataAuto("Medivac");
    gf_GetUnitDataAuto("Raven");
    gf_GetUnitDataAuto("Banshee");
    gf_GetUnitDataAuto("Battlecruiser");
    gf_GetUnitDataAuto("HellionTank");
    gv_buttonUnitFile[(gv_iUnit - 1)] = "Assets\\Textures\\btn-unit-terran-hellionbattlemode.dds";
    gf_GetUnitDataAuto("WidowMine");
    gf_GetUnitDataAuto("Cyclone");
    gv_iUnit += 1;
    gf_GetUnitDataAuto("Drone");
    gf_GetUnitDataAuto("Zergling");
    gf_GetUnitDataManual("Baneling", 50, 25);
    gf_GetUnitDataAuto("Roach");
    gf_GetUnitDataAuto("Hydralisk");
    gf_GetUnitDataAuto("Infestor");
    gf_GetUnitDataAuto("Queen");
    gf_GetUnitDataAuto("Overlord");
    gf_GetUnitDataAuto("Overseer");
    gf_GetUnitDataAuto("Mutalisk");
    gf_GetUnitDataAuto("Corruptor");
    gf_GetUnitDataAuto("BroodLord");
    gf_GetUnitDataAuto("Ultralisk");
    gf_GetUnitDataAuto("SwarmHostMP");
    gv_buttonUnitFile[(gv_iUnit - 1)] = "Assets\\Textures\\btn-unit-zerg-swarmhost.dds";
    gf_GetUnitDataAuto("Viper");
    gf_GetUnitDataAuto("Ravager");
    gf_GetUnitDataAuto("LurkerMP");
    gv_buttonUnitFile[(gv_iUnit - 1)] = "Assets\\Textures\\btn-unit-zerg-lurker.dds";
}

void gf_DatabaseResearch () {
    // Implementation
    gv_iUnit = 0;
    gf_GetResearchDataManual("ProtossGroundWeaponsLevel1", "Assets\\Textures\\btn-upgrade-protoss-groundweaponslevel1.dds", "ProtossGroundWeaponsLevel1", 1, "ForgeResearch", "0");
    gf_GetResearchDataManual("ProtossGroundWeaponsLevel2", "Assets\\Textures\\btn-upgrade-protoss-groundweaponslevel2.dds", "ProtossGroundWeaponsLevel2", 2, "ForgeResearch", "1");
    gf_GetResearchDataManual("ProtossGroundWeaponsLevel3", "Assets\\Textures\\btn-upgrade-protoss-groundweaponslevel3.dds", "ProtossGroundWeaponsLevel3", 3, "ForgeResearch", "2");
    gf_GetResearchDataManual("ProtossGroundArmorsLevel1", "Assets\\Textures\\btn-upgrade-protoss-groundarmorlevel1.dds", "ProtossGroundArmorLevel1", 1, "ForgeResearch", "3");
    gf_GetResearchDataManual("ProtossGroundArmorsLevel2", "Assets\\Textures\\btn-upgrade-protoss-groundarmorlevel2.dds", "ProtossGroundArmorLevel2", 2, "ForgeResearch", "4");
    gf_GetResearchDataManual("ProtossGroundArmorsLevel3", "Assets\\Textures\\btn-upgrade-protoss-groundarmorlevel3.dds", "ProtossGroundArmorLevel3", 3, "ForgeResearch", "5");
    gf_GetResearchDataManual("ProtossAirWeaponsLevel1", "Assets\\Textures\\btn-upgrade-protoss-airweaponslevel1.dds", "ProtossAirArmorLevel1", 1, "CyberneticsCoreResearch", "0");
    gf_GetResearchDataManual("ProtossAirWeaponsLevel2", "Assets\\Textures\\btn-upgrade-protoss-airweaponslevel2.dds", "ProtossAirArmorLevel2", 2, "CyberneticsCoreResearch", "1");
    gf_GetResearchDataManual("ProtossAirWeaponsLevel3", "Assets\\Textures\\btn-upgrade-protoss-airweaponslevel3.dds", "ProtossAirArmorLevel3", 3, "CyberneticsCoreResearch", "2");
    gf_GetResearchDataManual("ProtossAirArmorsLevel1", "Assets\\Textures\\btn-upgrade-protoss-airarmorlevel1.dds", "ProtossAirArmorLevel1", 1, "CyberneticsCoreResearch", "3");
    gf_GetResearchDataManual("ProtossAirArmorsLevel2", "Assets\\Textures\\btn-upgrade-protoss-airarmorlevel2.dds", "ProtossAirArmorLevel2", 2, "CyberneticsCoreResearch", "4");
    gf_GetResearchDataManual("ProtossAirArmorsLevel3", "Assets\\Textures\\btn-upgrade-protoss-airarmorlevel3.dds", "ProtossAirArmorLevel3", 3, "CyberneticsCoreResearch", "5");
    gf_GetResearchDataManual("ProtossShieldsLevel1", "Assets\\Textures\\btn-upgrade-protoss-shieldslevel1.dds", "ProtossShieldsLevel1", 1, "ForgeResearch", "6");
    gf_GetResearchDataManual("ProtossShieldsLevel2", "Assets\\Textures\\btn-upgrade-protoss-shieldslevel2.dds", "ProtossShieldsLevel2", 2, "ForgeResearch", "7");
    gf_GetResearchDataManual("ProtossShieldsLevel3", "Assets\\Textures\\btn-upgrade-protoss-shieldslevel3.dds", "ProtossShieldsLevel3", 3, "ForgeResearch", "8");
    gf_GetResearchDataManual("WarpGateResearch", "Assets\\Textures\\btn-building-protoss-warpgate.dds", "ResearchWarpGate", 0, "CyberneticsCoreResearch", "6");
    gf_GetResearchDataManual("Charge", "Assets\\Textures\\btn-ability-protoss-charge-color.dds", "ResearchCharge", 0, "TwilightCouncilResearch", "0");
    gf_GetResearchDataManual("BlinkTech", "Assets\\Textures\\btn-ability-protoss-blink-color.dds", "ResearchStalkerTeleport", 0, "TwilightCouncilResearch", "1");
    gf_GetResearchDataManual("AdeptKillBounce", "Assets\\Textures\\btn-techupgrade-terran-consumption.dds", "ResearchAdeptKillBounce", 0, "TwilightCouncilResearch", "2");
    gf_GetResearchDataManual("PsiStormTech", "Assets\\Textures\\btn-ability-protoss-psistorm-color.dds", "ResearchPsiStorm", 0, "TemplarArchivesResearch", "4");
    gf_GetResearchDataManual("ObserverGraviticBooster", "Assets\\Textures\\btn-upgrade-protoss-graviticbooster.dds", "ResearchGraviticBooster", 0, "RoboticsBayResearch", "1");
    gf_GetResearchDataManual("GraviticDrive", "Assets\\Textures\\btn-upgrade-protoss-graviticdrive.dds", "ResearchGraviticDrive", 0, "RoboticsBayResearch", "2");
    gf_GetResearchDataManual("ExtendedThermalLance", "Assets\\Textures\\btn-upgrade-protoss-extendedthermallance.dds", "ResearchExtendedThermalLance", 0, "RoboticsBayResearch", "5");
    gf_GetResearchDataManual("PhoenixRangeUpgrade", "Assets\\Textures\\btn-upgrade-protoss-phoenixrange.dds", "AnionPulseCrystals", 0, "FleetBeaconResearch", "2");
    gf_GetResearchDataManual("CarrierLaunchSpeedUpgrade", "Assets\\Textures\\btn-upgrade-protoss-gravitoncatapult.dds", "ResearchInterceptorLaunchSpeedUpgrade", 0, "FleetBeaconResearch", "1");
    gv_iUnit += 1;
    gf_GetResearchDataManual("TerranInfantryWeaponsLevel1", "Assets\\Textures\\btn-upgrade-terran-infantryweaponslevel1.dds", "TerranInfantryWeaponsLevel1", 1, "EngineeringBayResearch", "2");
    gf_GetResearchDataManual("TerranInfantryWeaponsLevel2", "Assets\\Textures\\btn-upgrade-terran-infantryweaponslevel2.dds", "TerranInfantryWeaponsLevel2", 2, "EngineeringBayResearch", "3");
    gf_GetResearchDataManual("TerranInfantryWeaponsLevel3", "Assets\\Textures\\btn-upgrade-terran-infantryweaponslevel3.dds", "TerranInfantryWeaponsLevel3", 3, "EngineeringBayResearch", "4");
    gf_GetResearchDataManual("TerranInfantryArmorsLevel1", "Assets\\Textures\\btn-upgrade-terran-infantryarmorlevel1.dds", "TerranInfantryArmorLevel1", 1, "EngineeringBayResearch", "6");
    gf_GetResearchDataManual("TerranInfantryArmorsLevel2", "Assets\\Textures\\btn-upgrade-terran-infantryarmorlevel2.dds", "TerranInfantryArmorLevel2", 2, "EngineeringBayResearch", "7");
    gf_GetResearchDataManual("TerranInfantryArmorsLevel3", "Assets\\Textures\\btn-upgrade-terran-infantryarmorlevel3.dds", "TerranInfantryArmorLevel3", 3, "EngineeringBayResearch", "8");
    gf_GetResearchDataManual("TerranVehicleAndShipWeaponsLevel1", "Assets\\Textures\\btn-upgrade-terran-vehicleweaponslevel1.dds", "TerranVehicleAndShipWeaponsLevel1", 1, "ArmoryResearch", "5");
    gf_GetResearchDataManual("TerranVehicleAndShipWeaponsLevel2", "Assets\\Textures\\btn-upgrade-terran-vehicleweaponslevel2.dds", "TerranVehicleAndShipWeaponsLevel2", 2, "ArmoryResearch", "6");
    gf_GetResearchDataManual("TerranVehicleAndShipWeaponsLevel3", "Assets\\Textures\\btn-upgrade-terran-vehicleweaponslevel3.dds", "TerranVehicleAndShipWeaponsLevel3", 3, "ArmoryResearch", "7");
    gf_GetResearchDataManual("TerranVehicleAndShipArmorsLevel1", "Assets\\Textures\\btn-upgrade-terran-vehicleplatinglevel1.dds", "TerranVehicleAndShipPlatingLevel1", 1, "ArmoryResearchSwarm", "3");
    gf_GetResearchDataManual("TerranVehicleAndShipArmorsLevel2", "Assets\\Textures\\btn-upgrade-terran-vehicleplatinglevel2.dds", "TerranVehicleAndShipPlatingLevel2", 2, "ArmoryResearchSwarm", "4");
    gf_GetResearchDataManual("TerranVehicleAndShipArmorsLevel3", "Assets\\Textures\\btn-upgrade-terran-vehicleplatinglevel3.dds", "TerranVehicleAndShipPlatingLevel3", 3, "ArmoryResearchSwarm", "5");
    gf_GetResearchDataManual("ShieldWall", "Assets\\Textures\\btn-techupgrade-terran-combatshield-color.dds", "ResearchShieldWall", 0, "BarracksTechLabResearch", "1");
    gf_GetResearchDataManual("Stimpack", "Assets\\Textures\\btn-ability-terran-stimpack-color.dds", "Stimpack", 0, "BarracksTechLabResearch", "0");
    gf_GetResearchDataManual("PunisherGrenades", "Assets\\Textures\\btn-ability-terran-punishergrenade-color.dds", "ResearchPunisherGrenades", 0, "BarracksTechLabResearch", "2");
    gf_GetResearchDataManual("PersonalCloaking", "Assets\\Textures\\btn-ability-terran-cloak-color.dds", "ResearchPersonalCloaking", 0, "GhostAcademyResearch", "0");
    gf_GetResearchDataManual("GhostMoebiusReactor", "Assets\\Textures\\btn-upgrade-terran-mobiusreactor.dds", "ResearchGhostEnergyUpgrade", 0, "GhostAcademyResearch", "1");
    gf_GetResearchDataManual("HiSecAutoTracking", "Assets\\Textures\\btn-upgrade-terran-hisecautotracking.dds", "ResearchHiSecAutoTracking", 0, "EngineeringBayResearch", "0");
    gf_GetResearchDataManual("NeosteelFrame", "Assets\\Textures\\btn-upgrade-terran-neosteelframe.dds", "ResearchNeosteelFrame", 0, "EngineeringBayResearch", "5");
    gf_GetResearchDataManual("TerranBuildingArmor", "Assets\\Textures\\btn-upgrade-terran-buildingarmor.dds", "UpgradeBuildingArmorLevel1", 0, "EngineeringBayResearch", "1");
    gf_GetResearchDataManual("HighCapacityBarrels", "Assets\\Textures\\btn-upgrade-terran-infernalpreigniter.dds", "ResearchHighCapacityBarrels", 0, "FactoryTechLabResearch", "1");
    gf_GetResearchDataManual("DrillClaws", "Assets\\Textures\\btn-upgrade-terran-researchdrillingclaws.dds", "ResearchDrillClaws", 0, "FactoryTechLabResearch", "4");
    gf_GetResearchDataManual("CycloneLockOnRangeUpgrade", "Assets\\Textures\\btn-upgrade-terran-durablematerials.dds", "ResearchLockOnRangeUpgrade", 0, "FactoryTechLabResearch", "5");
    gf_GetResearchDataManual("MedivacCaduceusReactor", "Assets\\Textures\\btn-upgrade-terran-caduceusreactor.dds", "ResearchMedivacEnergyUpgrade", 0, "StarportTechLabResearch", "2");
    gf_GetResearchDataManual("DurableMaterials", "Assets\\Textures\\btn-upgrade-terran-durablematerials.dds", "ResearchDurableMaterials", 0, "StarportTechLabResearch", "7");
    gf_GetResearchDataManual("RavenCorvidReactor", "Assets\\Textures\\btn-upgrade-terran-corvidreactor.dds", "ResearchRavenEnergyUpgrade", 0, "StarportTechLabResearch", "3");
    gf_GetResearchDataManual("BansheeCloak", "Assets\\Textures\\btn-ability-terran-cloak-color.dds", "ResearchBansheeCloak", 0, "StarportTechLabResearch", "0");
    gf_GetResearchDataManual("BansheeSpeed", "Assets\\Textures\\btn-upgrade-terran-reapernitropacks.dds", "BansheeSpeed", 0, "StarportTechLabResearch", "9");
    gf_GetResearchDataManual("BattlecruiserEnableSpecializations", "Assets\\Textures\\btn-ability-terran-yamatogun-color.dds", "ResearchBattlecruiserSpecializations", 0, "FusionCoreResearch", "0");
    gf_GetResearchDataManual("BattlecruiserBehemothReactor", "Assets\\Textures\\btn-upgrade-terran-behemothreactor.dds", "ResearchBattlecruiserEnergyUpgrade", 0, "FusionCoreResearch", "1");
    gv_iUnit += 1;
    gf_GetResearchDataManual("ZergMeleeWeaponsLevel1", "Assets\\Textures\\btn-upgrade-zerg-meleeattacks-level1.dds", "zergmeleeweapons1", 1, "evolutionchamberresearch", "0");
    gf_GetResearchDataManual("ZergMeleeWeaponsLevel2", "Assets\\Textures\\btn-upgrade-zerg-meleeattacks-level2.dds", "zergmeleeweapons2", 2, "evolutionchamberresearch", "1");
    gf_GetResearchDataManual("ZergMeleeWeaponsLevel3", "Assets\\Textures\\btn-upgrade-zerg-meleeattacks-level3.dds", "zergmeleeweapons3", 3, "evolutionchamberresearch", "2");
    gf_GetResearchDataManual("ZergMissileWeaponsLevel1", "Assets\\Textures\\btn-upgrade-zerg-missileattacks-level1.dds", "zergmissileweapons1", 1, "evolutionchamberresearch", "6");
    gf_GetResearchDataManual("ZergMissileWeaponsLevel2", "Assets\\Textures\\btn-upgrade-zerg-missileattacks-level2.dds", "zergmissileweapons2", 2, "evolutionchamberresearch", "7");
    gf_GetResearchDataManual("ZergMissileWeaponsLevel3", "Assets\\Textures\\btn-upgrade-zerg-missileattacks-level3.dds", "zergmissileweapons3", 3, "evolutionchamberresearch", "8");
    gf_GetResearchDataManual("ZergGroundArmorsLevel1", "Assets\\Textures\\btn-upgrade-zerg-groundcarapace-level1.dds", "zerggroundarmor1", 1, "evolutionchamberresearch", "3");
    gf_GetResearchDataManual("ZergGroundArmorsLevel2", "Assets\\Textures\\btn-upgrade-zerg-groundcarapace-level2.dds", "zerggroundarmor2", 2, "evolutionchamberresearch", "4");
    gf_GetResearchDataManual("ZergGroundArmorsLevel3", "Assets\\Textures\\btn-upgrade-zerg-groundcarapace-level3.dds", "zerggroundarmor3", 3, "evolutionchamberresearch", "5");
    gf_GetResearchDataManual("ZergFlyerWeaponsLevel1", "Assets\\Textures\\btn-upgrade-zerg-airattacks-level1.dds", "zergflyerattack1", 1, "SpireResearch", "0");
    gf_GetResearchDataManual("ZergFlyerWeaponsLevel2", "Assets\\Textures\\btn-upgrade-zerg-airattacks-level2.dds", "zergflyerattack2", 2, "SpireResearch", "1");
    gf_GetResearchDataManual("ZergFlyerWeaponsLevel3", "Assets\\Textures\\btn-upgrade-zerg-airattacks-level3.dds", "zergflyerattack3", 3, "SpireResearch", "2");
    gf_GetResearchDataManual("ZergFlyerArmorsLevel1", "Assets\\Textures\\btn-upgrade-zerg-flyercarapace-level1.dds", "zergflyerarmor1", 1, "SpireResearch", "3");
    gf_GetResearchDataManual("ZergFlyerArmorsLevel2", "Assets\\Textures\\btn-upgrade-zerg-flyercarapace-level2.dds", "zergflyerarmor2", 2, "SpireResearch", "4");
    gf_GetResearchDataManual("ZergFlyerArmorsLevel3", "Assets\\Textures\\btn-upgrade-zerg-flyercarapace-level3.dds", "zergflyerarmor3", 3, "SpireResearch", "5");
    gf_GetResearchDataManual("Burrow", "Assets\\Textures\\btn-ability-zerg-burrow-color.dds", "ResearchBurrow", 0, "LairResearch", "3");
    gf_GetResearchDataManual("zerglingmovementspeed", "Assets\\Textures\\btn-upgrade-zerg-metabolicboost.dds", "zerglingmovementspeed", 0, "SpawningPoolResearch", "0");
    gf_GetResearchDataManual("zerglingattackspeed", "Assets\\Textures\\btn-upgrade-zerg-adrenalglands.dds", "zerglingattackspeed", 0, "SpawningPoolResearch", "1");
    gf_GetResearchDataManual("GlialReconstitution", "Assets\\Textures\\btn-upgrade-zerg-glialreconstitution.dds", "EvolveGlialRegeneration", 0, "RoachWarrenResearch", "1");
    gf_GetResearchDataManual("TunnelingClaws", "Assets\\Textures\\btn-upgrade-zerg-tunnelingclaws.dds", "EvolveTunnelingClaws", 0, "RoachWarrenResearch", "2");
    gf_GetResearchDataManual("CentrificalHooks", "Assets\\Textures\\btn-upgrade-zerg-centrifugalhooks.dds", "EvolveCentrificalHooks", 0, "BanelingNestResearch", "0");
    gf_GetResearchDataManual("hydraliskspeed", "Assets\\Textures\\btn-upgrade-zerg-groovedspines.dds", "hydraliskspeed", 0, "HydraliskDenResearch", "2");
    gf_GetResearchDataManual("overlordspeed", "Assets\\Textures\\btn-upgrade-zerg-pneumatizedcarapace.dds", "overlordspeed", 0, "LairResearch", "1");
    gf_GetResearchDataManual("overlordtransport", "Assets\\Textures\\btn-upgrade-zerg-ventralsacs.dds", "EvolveVentralSacks", 0, "LairResearch", "2");
    gf_GetResearchDataManual("InfestorEnergyUpgrade", "Assets\\Textures\\btn-upgrade-zerg-pathogenglands.dds", "EvolveInfestorEnergyUpgrade", 0, "InfestationPitResearch", "2");
    gf_GetResearchDataManual("NeuralParasite", "Assets\\Textures\\btn-ability-zerg-neuralparasite-color.dds", "ResearchNeuralParasite", 0, "InfestationPitResearch", "3");
    gf_GetResearchDataManual("FlyingLocusts", "Assets\\Textures\\btn-unit-zerg-locustflyer.dds", "EvolveFlyingLocusts", 0, "InfestationPitResearch", "5");
    gf_GetResearchDataManual("ChitinousPlating", "Assets\\Textures\\btn-upgrade-zerg-chitinousplating.dds", "EvolveChitinousPlating", 0, "UltraliskCavernResearch", "2");
    gf_GetResearchDataManual("HydraliskSpeedUpgrade", "Assets\\Textures\\btn-upgrade-zerg-evolvemuscularaugments.dds", "MuscularAugments", 0, "HydraliskDenResearch", "3");
}

void gf_GetUnitDataAuto (string lp_inputUnitLink) {
    string auto92A48CE3_val;

    // Variable Declarations
    string lv_unitTypeStringWords;
    string lv_unitTypeStringWord;
    string lv_unitTypestringword;
    string lv_raceString;
    text lv_nameText;
    text lv_tooltipText;
    int lv_minerals;
    int lv_vespene;
    string lv_image;
    fixed lv_supply;

    // Variable Initialization
    lv_unitTypeStringWords = "";
    lv_unitTypeStringWord = "";
    lv_unitTypestringword = "";
    lv_raceString = "";

    // Implementation
    gv_unitLink[gv_iUnit] = lp_inputUnitLink;
    lv_unitTypeStringWords = (lp_inputUnitLink);
    lv_unitTypeStringWord = StringReplaceWord(lv_unitTypeStringWords, " ", "", c_stringReplaceAll, c_stringCase);
    lv_unitTypestringword = StringCase(lv_unitTypeStringWord, false);
    lv_nameText = StringExternal(("Unit/Name/" + lv_unitTypeStringWord));
    gv_unitName[gv_iUnit] = lv_nameText;
    lv_tooltipText = StringExternal(("Button/Tooltip/" + lv_unitTypeStringWord));
    lv_minerals = UnitTypeGetCost(gv_unitLink[gv_iUnit], c_unitCostMinerals);
    lv_vespene = UnitTypeGetCost(gv_unitLink[gv_iUnit], c_unitCostVespene);
    lv_supply = (-1.0 * StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, lv_unitTypeStringWords, "Food", c_playerAny)));
    gv_buttonUnitTooltip[gv_iUnit] = (StringExternal("Param/Value/45E98B90") + lv_nameText + StringExternal("Param/Value/8E1808C1") + StringExternal("Param/Value/44F3C68B") + StringExternal("Param/Value/7D13BC98") + IntToText(lv_minerals) + StringExternal("Param/Value/C1C2B003") + StringExternal("Param/Value/F8BFE92F") + StringExternal("Param/Value/51A5AB9E") + IntToText(lv_vespene) + StringExternal("Param/Value/7C5FBC46") + StringExternal("Param/Value/8005B381") + StringExternal("Param/Value/DD5207D9") + FixedToTextAdvanced(lv_supply, c_formatNumberStyleNormal, true, 1, 0) + StringExternal("Param/Value/597BFB46") + lv_tooltipText);
    lv_raceString = CatalogFieldValueGet(c_gameCatalogUnit, lv_unitTypeStringWords, "Race", c_playerAny);
    auto92A48CE3_val = lv_raceString;
    if (auto92A48CE3_val == "Prot") {
        lv_raceString = "protoss";
    }
    else if (auto92A48CE3_val == "Terr") {
        lv_raceString = "terran";
    }
    else if (auto92A48CE3_val == "Zerg") {
        lv_raceString = "zerg";
    }
    else {
    }
    gv_buttonUnitFile[gv_iUnit] = "Assets\\Textures\\btn-unit-" + lv_raceString + "-" + lv_unitTypestringword + ".dds";
    gv_iUnit += 1;
}

void gf_GetUnitDataManual (string lp_inputUnitLink, int lp_inputUnitMinerals, int lp_inputUnitVespene) {
    string autoE01B631A_val;

    // Variable Declarations
    string lv_unitTypeStringWords;
    string lv_unitTypeStringWord;
    string lv_unitTypestringword;
    string lv_raceString;
    text lv_nameText;
    text lv_tooltipText;
    string lv_image;
    fixed lv_supply;

    // Variable Initialization
    lv_unitTypeStringWords = "";
    lv_unitTypeStringWord = "";
    lv_unitTypestringword = "";
    lv_raceString = "";

    // Implementation
    gv_unitLink[gv_iUnit] = lp_inputUnitLink;
    lv_unitTypeStringWords = (lp_inputUnitLink);
    lv_unitTypeStringWord = StringReplaceWord(lv_unitTypeStringWords, " ", "", c_stringReplaceAll, c_stringCase);
    lv_unitTypestringword = StringCase(lv_unitTypeStringWord, false);
    lv_nameText = StringExternal(("Unit/Name/" + lv_unitTypeStringWord));
    gv_unitName[gv_iUnit] = lv_nameText;
    lv_tooltipText = StringExternal(("Button/Tooltip/" + lv_unitTypeStringWord));
    lv_supply = (-1.0 * StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, lv_unitTypeStringWords, "Food", c_playerAny)));
    gv_buttonUnitTooltip[gv_iUnit] = (StringExternal("Param/Value/8C88CC9A") + lv_nameText + StringExternal("Param/Value/7CAA77D5") + StringExternal("Param/Value/EF759C6F") + StringExternal("Param/Value/A24BEB74") + IntToText(lp_inputUnitMinerals) + StringExternal("Param/Value/EBFE4F53") + StringExternal("Param/Value/5F92F221") + StringExternal("Param/Value/A20C96E6") + IntToText(lp_inputUnitVespene) + StringExternal("Param/Value/D947F0A6") + StringExternal("Param/Value/CDDCA8C9") + StringExternal("Param/Value/278DDAC1") + FixedToTextAdvanced(lv_supply, c_formatNumberStyleNormal, true, 1, 0) + StringExternal("Param/Value/A2E69336") + lv_tooltipText);
    lv_raceString = CatalogFieldValueGet(c_gameCatalogUnit, lv_unitTypeStringWords, "Race", c_playerAny);
    autoE01B631A_val = lv_raceString;
    if (autoE01B631A_val == "Prot") {
        lv_raceString = "protoss";
    }
    else if (autoE01B631A_val == "Terr") {
        lv_raceString = "terran";
    }
    else if (autoE01B631A_val == "Zerg") {
        lv_raceString = "zerg";
    }
    else {
    }
    gv_buttonUnitFile[gv_iUnit] = "Assets\\Textures\\btn-unit-" + lv_raceString + "-" + lv_unitTypestringword + ".dds";
    gv_iUnit += 1;
}

void gf_GetResearchDataManual (string lp_inputResearchLink, string lp_inputImageLink, string lp_inputTextLink, int lp_inputResearchTypeLevel, string lp_ability, string lp_array) {
    // Variable Declarations
    text lv_nameText;
    text lv_tooltipText;
    int lv_minerals;
    int lv_vespene;
    int lv_time;

    // Variable Initialization

    // Implementation
    gv_upgradeLink[gv_iUnit] = lp_inputResearchLink;
    lv_nameText = StringExternal(("Button/Name/" + lp_inputTextLink));
    gv_upgradeName[gv_iUnit] = lv_nameText;
    lv_tooltipText = StringExternal(("Button/Tooltip/" + lp_inputTextLink));
    lv_minerals = CatalogFieldValueGetAsInt(c_gameCatalogAbil, lp_ability, ("InfoArray[" + lp_array + "].Resource[0]"), c_playerAny);
    lv_vespene = CatalogFieldValueGetAsInt(c_gameCatalogAbil, lp_ability, ("InfoArray[" + lp_array + "].Resource[1]"), c_playerAny);
    lv_time = CatalogFieldValueGetAsInt(c_gameCatalogAbil, lp_ability, ("InfoArray[" + lp_array + "].Time"), c_playerAny);
    gv_buttonUpgradeTooltip[gv_iUnit] = (StringExternal("Param/Value/E85D2251") + lv_nameText + StringExternal("Param/Value/198E7BF4") + StringExternal("Param/Value/E753F8D6") + StringExternal("Param/Value/59228993") + IntToText(lv_minerals) + StringExternal("Param/Value/39750482") + StringExternal("Param/Value/F8C00CC1") + StringExternal("Param/Value/BE42AAE0") + IntToText(lv_vespene) + StringExternal("Param/Value/798F34BC") + StringExternal("Param/Value/DA90FF82") + StringExternal("Param/Value/FE9D71E9") + IntToText(lv_time) + StringExternal("Param/Value/B49EEF04") + lv_tooltipText);
    gv_buttonUpgradeFile[gv_iUnit] = lp_inputImageLink;
    gv_upgradeLevel[gv_iUnit] = lp_inputResearchTypeLevel;
    gv_iUnit += 1;
}

int gf_convertiplayertocomputer () {
    // Implementation
    return (gv_iPlayer + 9);
}

int gf_convertiplayertoplayer () {
    // Implementation
    return (gv_iPlayer + 1);
}

int gf_convertcomputertoiplayer (int lp_inputComputer) {
    // Implementation
    gv_iPlayer = (lp_inputComputer - 9);
    return gv_iPlayer;
}

text gf_convertiplayertocolor () {
    // Implementation
    if ((gv_iPlayer == 0)) {
        return StringExternal("Param/Value/02263E12");
    }
    else {
        return StringExternal("Param/Value/CCE0680F");
    }
}

point gf_convertiplayertopoint () {
    // Implementation
    if ((gv_iPlayer == 0)) {
        return PointFromId(106);
    }
    else {
        return PointFromId(107);
    }
}

point gf_convertcomputertopoint () {
    // Implementation
    if ((gv_computer == 9)) {
        return PointFromId(106);
    }
    else {
        return PointFromId(107);
    }
}

string gf_ConvertUnitTypeStructuretoIcon (string lp_inputUnitLink) {
    string autoA2020FA5_val;
    string auto4E280D49_val;

    // Variable Declarations
    string lv_unitTypeStringWords;
    string lv_unitTypeStringWord;
    string lv_unitTypestringword;
    string lv_raceString;

    // Variable Initialization
    lv_unitTypeStringWords = "";
    lv_unitTypeStringWord = "";
    lv_unitTypestringword = "";
    lv_raceString = "";

    // Implementation
    autoA2020FA5_val = lp_inputUnitLink;
    if (autoA2020FA5_val == "TemplarArchive") {
        return "Assets\\Textures\\btn-building-protoss-templararchives.dds";
    }
    else if (autoA2020FA5_val == "RoboticsBay") {
        return "Assets\\Textures\\btn-building-protoss-roboticssupportbay.dds";
    }
    else if (autoA2020FA5_val == "OrbitalCommand") {
        return "Assets\\Textures\\btn-building-terran-surveillancestation.dds";
    }
    else if (autoA2020FA5_val == "SensorTower") {
        return "Assets\\Textures\\btn-building-terran-sensordome.dds";
    }
    else if (autoA2020FA5_val == "NydusCanal") {
        return "Assets\\Textures\\btn-building-zerg-nydusworm.dds";
    }
    else if (autoA2020FA5_val == "BarracksTechLab") {
        return "Assets\\Textures\\btn-building-terran-techlab.dds";
    }
    else if (autoA2020FA5_val == "FactoryTechLab") {
        return "Assets\\Textures\\btn-building-terran-techlab.dds";
    }
    else if (autoA2020FA5_val == "StarportTechLab") {
        return "Assets\\Textures\\btn-building-terran-techlab.dds";
    }
    else if (autoA2020FA5_val == "BarracksReactor") {
        return "Assets\\Textures\\btn-building-terran-reactor.dds";
    }
    else if (autoA2020FA5_val == "FactoryReactor") {
        return "Assets\\Textures\\btn-building-terran-reactor.dds";
    }
    else if (autoA2020FA5_val == "StarportReactor") {
        return "Assets\\Textures\\btn-building-terran-reactor.dds";
    }
    else {
    }
    lv_unitTypeStringWords = (lp_inputUnitLink);
    lv_unitTypeStringWord = StringReplaceWord(lv_unitTypeStringWords, " ", "", c_stringReplaceAll, c_stringCase);
    lv_unitTypestringword = StringCase(lv_unitTypeStringWord, false);
    lv_raceString = CatalogFieldValueGet(c_gameCatalogUnit, lv_unitTypeStringWords, "Race", c_playerAny);
    auto4E280D49_val = lv_raceString;
    if (auto4E280D49_val == "Prot") {
        lv_raceString = "protoss";
    }
    else if (auto4E280D49_val == "Terr") {
        lv_raceString = "terran";
    }
    else if (auto4E280D49_val == "Zerg") {
        lv_raceString = "zerg";
    }
    else {
    }
    return "Assets\\Textures\\btn-building-" + lv_raceString + "-" + lv_unitTypestringword + ".dds";
}

void gf_CreateDialogs () {
    int auto6A04D4A2_ae;
    int auto6A04D4A2_ai;
    int autoAB88C305_ae;
    int autoAB88C305_ai;
    int auto8ECFC74D_ae;
    int auto8ECFC74D_ai;

    // Variable Declarations
    int lv_x;
    int lv_y;

    // Variable Initialization
    lv_y = gv_xYOffset;

    // Implementation
    DialogCreate(180, 495, c_anchorTopLeft, lv_x, lv_y, true);
    gv_dialogCreator = DialogLastCreated();
    gf_Createbuttonsforcreator();
    DialogCreate(200, 575, c_anchorTopLeft, lv_x, lv_y, true);
    gv_dialogAttack = DialogLastCreated();
    gf_Createbuttonsforattack();
    lv_y += 495;
    DialogCreate(1260, 100, c_anchorTopLeft, lv_x, lv_y, true);
    gv_dialogTerrainSubmenu = DialogLastCreated();
    gf_Createbuttonsforsubmenuterrain();
    DialogCreate(1260, 100, c_anchorTopLeft, lv_x, lv_y, true);
    gv_dialogSaveSubmenu = DialogLastCreated();
    gf_Createbuttonsforsubmenusave();
    DialogCreate(1260, 100, c_anchorTopLeft, lv_x, lv_y, true);
    gv_dialogLoadSubmenu = DialogLastCreated();
    gf_Createbuttonsforsubmenuload();
    lv_x += 180;
    DialogCreate(540, 220, c_anchorTopLeft, lv_x, lv_y, true);
    gv_dialogFilenameSubmenu = DialogLastCreated();
    gf_Createbuttonsforsubmenufilename();
    auto6A04D4A2_ae = 1;
    auto6A04D4A2_ai = 1;
    gv_iPlayer = 0;
    for ( ; ( (auto6A04D4A2_ai >= 0 && gv_iPlayer <= auto6A04D4A2_ae) || (auto6A04D4A2_ai <= 0 && gv_iPlayer >= auto6A04D4A2_ae) ) ; gv_iPlayer += auto6A04D4A2_ai ) {
        lv_y = gv_xYOffset;
        DialogCreate(540, 100, c_anchorTopLeft, lv_x, lv_y, true);
        gv_dialogRace[gv_iPlayer] = DialogLastCreated();
        gf_Createbuttonsforraces();
        lv_y += 100;
        gv_iUnit = 0;
        gv_iTech = 0;
        autoAB88C305_ae = 3;
        autoAB88C305_ai = 1;
        gv_iRace = 1;
        for ( ; ( (autoAB88C305_ai >= 0 && gv_iRace <= autoAB88C305_ae) || (autoAB88C305_ai <= 0 && gv_iRace >= autoAB88C305_ae) ) ; gv_iRace += autoAB88C305_ai ) {
            DialogCreate(540, 376, c_anchorTopLeft, lv_x, lv_y, true);
            gv_dialogUnits[gv_iRace][gv_iTech][gv_iPlayer] = DialogLastCreated();
            gf_Createbuttonsforunits();
        }
        gv_iUnit = 0;
        gv_iTech = 1;
        auto8ECFC74D_ae = 3;
        auto8ECFC74D_ai = 1;
        gv_iRace = 1;
        for ( ; ( (auto8ECFC74D_ai >= 0 && gv_iRace <= auto8ECFC74D_ae) || (auto8ECFC74D_ai <= 0 && gv_iRace >= auto8ECFC74D_ae) ) ; gv_iRace += auto8ECFC74D_ai ) {
            DialogCreate(540, 380, c_anchorTopLeft, lv_x, lv_y, true);
            gv_dialogUnits[gv_iRace][gv_iTech][gv_iPlayer] = DialogLastCreated();
            gf_Createbuttonsforresearch();
        }
        lv_y += 300;
        DialogCreate(540, 100, c_anchorTopLeft, lv_x, lv_y, true);
        gv_dialogPlayer[gv_iPlayer] = DialogLastCreated();
        gf_Createbuttonsforplayer();
        lv_x += 540;
        gv_currentRace[gv_iPlayer] = 1;
        gv_currentTech[gv_iPlayer] = 0;
    }
    DialogCreate(610, 700, c_anchorTopLeft, 180, gv_xYOffset, true);
    gv_dialogOptions = DialogLastCreated();
    gf_Createbuttonsforsubmenuoptions();
    DialogCreate(600, 700, c_anchorTopLeft, 780, gv_xYOffset, true);
    gv_dialogAlliances = DialogLastCreated();
    gf_Createbuttonsforsubmenualliances();
    gf_ShowAllDialogs();
}

void gf_Createbuttonsforattack () {
    // Variable Declarations
    int lv_x;
    int lv_y;
    int lv_buttonLabelWidth;

    // Variable Initialization
    lv_x = gv_xYOffset;
    lv_y = gv_xYOffset;
    lv_buttonLabelWidth = 140;

    // Implementation
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), lv_buttonLabelWidth, gv_buttonLabelHeight, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/68F236BB"), StringExternal("Param/Value/34958E10"), "");
    gv_buttonBack = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "OptionsLabelLeft", PlayerGroupActive());
    lv_y += gv_buttonLabelHeight;
    lv_y += gv_buttonLabelHeight;
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), lv_buttonLabelWidth, gv_buttonLabelHeight, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/1F0C5A21"), StringExternal("Param/Value/02F1257D"), "");
    gv_buttonOptionsSubmenuCopy = DialogControlLastCreated();
    lv_y += gv_buttonLabelHeight;
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), lv_buttonLabelWidth, gv_buttonLabelHeight, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/F0CEDC16"), StringExternal("Param/Value/0BFDF1A0"), "");
    gv_buttonSaveSubmenu2 = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "OptionsLabelLeft", PlayerGroupActive());
    lv_y += gv_buttonLabelHeight;
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), lv_buttonLabelWidth, gv_buttonLabelHeight, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/CE3EE3AF"), StringExternal("Param/Value/0A7BC0FC"), "");
    gv_buttonLoadSubmenu2 = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "OptionsLabelLeft", PlayerGroupActive());
    lv_y += gv_buttonLabelHeight;
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), lv_buttonLabelWidth, gv_buttonLabelHeight, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/8DE25369"), StringExternal("Param/Value/CE9BBD57"), "");
    gv_buttonTerrainSubmenuCopy = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "OptionsLabelLeft", PlayerGroupActive());
    lv_y += gv_buttonLabelHeight;
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), lv_buttonLabelWidth, gv_buttonLabelHeight, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/2FA6F6EE"), StringExternal("Param/Value/CB49A334"), "");
    gv_buttonVision = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "OptionsLabelLeft", PlayerGroupActive());
    lv_y += gv_buttonLabelHeight;
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), lv_buttonLabelWidth, gv_buttonLabelHeight, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/2E109A1B"), StringExternal("Param/Value/D721DEF1"), "");
    gv_buttonUpgrades = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "OptionsLabelLeft", PlayerGroupActive());
    lv_y += gv_buttonLabelHeight;
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), lv_buttonLabelWidth, gv_buttonLabelHeight, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/F29E7F3E"), StringExternal("Param/Value/AB440917"), "");
    gv_buttonEnergy = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "OptionsLabelLeft", PlayerGroupActive());
    lv_y += gv_buttonLabelHeight;
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), lv_buttonLabelWidth, gv_buttonLabelHeight, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/2D4F0FB8"), StringExternal("Param/Value/8E2DF3DA"), "");
    gv_buttonPause = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "OptionsLabelLeft", PlayerGroupActive());
    lv_y += gv_buttonLabelHeight;
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), lv_buttonLabelWidth, gv_buttonLabelHeight, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/F424B2D4"), StringExternal("Param/Value/ADECB5FF"), "");
    gv_buttonRespawn = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "OptionsLabelLeft", PlayerGroupActive());
    lv_y += gv_buttonLabelHeight;
    lv_y += gv_buttonLabelHeight;
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), lv_buttonLabelWidth, gv_buttonLabelHeight, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/CC641A34"), StringExternal("Param/Value/9FADDF9B"), "");
    gv_buttonAttack = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "OptionsLabelLeft", PlayerGroupActive());
}

void gf_Createbuttonsforcreator () {
    // Variable Declarations
    int lv_x;
    int lv_y;

    // Variable Initialization
    lv_x = gv_xYOffset;
    lv_y = gv_xYOffset;

    // Implementation
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), gv_buttonLabelWidth, gv_buttonLabelHeight, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/7A74B930"), StringExternal("Param/Value/FA6D01BF"), "");
    gv_buttonOptionsSubmenu = DialogControlLastCreated();
    lv_y += gv_buttonLabelHeight;
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), gv_buttonLabelWidth, gv_buttonLabelHeight, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/12385A77"), StringExternal("Param/Value/5BB8ACAA"), "");
    gv_buttonTerrainSubmenu = DialogControlLastCreated();
    lv_y += gv_buttonLabelHeight;
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), gv_buttonLabelWidth, gv_buttonLabelHeight, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/3BB8E3D8"), StringExternal("Param/Value/78D4927B"), "");
    gv_buttonSaveSubmenu = DialogControlLastCreated();
    lv_y += gv_buttonLabelHeight;
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), gv_buttonLabelWidth, gv_buttonLabelHeight, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/181EA205"), StringExternal("Param/Value/47707057"), "");
    gv_buttonLoadSubmenu = DialogControlLastCreated();
    lv_y += gv_buttonLabelHeight;
    lv_y += gv_buttonLabelHeight;
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), gv_buttonLabelWidth, gv_buttonLabelHeight, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/577FF5AB"), StringExternal("Param/Value/56A2A3ED"), "");
    gv_buttonRedo = DialogControlLastCreated();
    DialogControlSetEnabled(gv_buttonRedo, PlayerGroupActive(), false);
    lv_y += gv_buttonLabelHeight;
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), gv_buttonLabelWidth, gv_buttonLabelHeight, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/CF2BD471"), StringExternal("Param/Value/5F4F2139"), "");
    gv_buttonMirror = DialogControlLastCreated();
    lv_y += gv_buttonLabelHeight;
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), gv_buttonLabelWidth, gv_buttonLabelHeight, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/642FBE12"), StringExternal("Param/Value/729031FD"), "");
    gv_buttonSwitch = DialogControlLastCreated();
    lv_y += gv_buttonLabelHeight;
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), gv_buttonLabelWidth, gv_buttonLabelHeight, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/61EFCA0A"), StringExternal("Param/Value/73384E8E"), "");
    gv_buttonClear = DialogControlLastCreated();
    lv_y += gv_buttonLabelHeight;
    lv_y += gv_buttonLabelHeight;
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), gv_buttonLabelWidth, gv_buttonLabelHeight, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/031DAA97"), StringExternal("Param/Value/BE4BABC0"), "");
    gv_buttonStart = DialogControlLastCreated();
}

void gf_Createbuttonsforunits () {
    int auto43D9AE51_ae;
    int auto43D9AE51_ai;
    int auto3127E76B_ae;
    int auto3127E76B_ai;

    // Variable Declarations
    int lv_x;
    int lv_y;
    int lv_iacross;
    int lv_idown;

    // Variable Initialization
    lv_x = gv_xYOffset;
    lv_y = gv_xYOffset;

    // Implementation
    auto43D9AE51_ae = 4;
    auto43D9AE51_ai = 1;
    lv_idown = 1;
    for ( ; ( (auto43D9AE51_ai >= 0 && lv_idown <= auto43D9AE51_ae) || (auto43D9AE51_ai <= 0 && lv_idown >= auto43D9AE51_ae) ) ; lv_idown += auto43D9AE51_ai ) {
        lv_x = gv_xYOffset;
        auto3127E76B_ae = 6;
        auto3127E76B_ai = 1;
        lv_iacross = 1;
        for ( ; ( (auto3127E76B_ai >= 0 && lv_iacross <= auto3127E76B_ae) || (auto3127E76B_ai <= 0 && lv_iacross >= auto3127E76B_ae) ) ; lv_iacross += auto3127E76B_ai ) {
            libNtve_gf_CreateDialogItemButton(DialogLastCreated(), gv_buttonWidth, gv_buttonWidth, c_anchorTopLeft, lv_x, lv_y, gv_buttonUnitTooltip[gv_iUnit], StringExternal("Param/Value/5DB31F6B"), "");
            gv_buttonUnit[gv_iUnit][gv_iPlayer] = DialogControlLastCreated();
            gf_Colorbuttonsredblue(DialogControlLastCreated(), gv_iPlayer);
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), gv_buttonImageWidth, gv_buttonImageHeight, c_anchorTopLeft, (lv_x + 2), (lv_y + 2), StringExternal("Param/Value/BC7B559F"), gv_buttonUnitFile[gv_iUnit], c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
            gv_iUnit += 1;
            if ((gv_unitLink[gv_iUnit] == null)) {
                gv_iUnit += 1;
                return ;
            }
            else {
            }
            lv_x += gv_buttonWidth;
        }
        lv_y += gv_buttonHeight;
    }
}

void gf_Createbuttonsforresearch () {
    int autoA86DB6BD_ae;
    int autoA86DB6BD_ai;
    int auto8E97BB58_ae;
    int auto8E97BB58_ai;

    // Variable Declarations
    int lv_x;
    int lv_y;
    int lv_iacross;
    int lv_idown;

    // Variable Initialization
    lv_x = gv_xYOffset;
    lv_y = gv_xYOffset;

    // Implementation
    autoA86DB6BD_ae = 4;
    autoA86DB6BD_ai = 1;
    lv_idown = 1;
    for ( ; ( (autoA86DB6BD_ai >= 0 && lv_idown <= autoA86DB6BD_ae) || (autoA86DB6BD_ai <= 0 && lv_idown >= autoA86DB6BD_ae) ) ; lv_idown += autoA86DB6BD_ai ) {
        lv_x = gv_xYOffset;
        auto8E97BB58_ae = 6;
        auto8E97BB58_ai = 1;
        lv_iacross = 1;
        for ( ; ( (auto8E97BB58_ai >= 0 && lv_iacross <= auto8E97BB58_ae) || (auto8E97BB58_ai <= 0 && lv_iacross >= auto8E97BB58_ae) ) ; lv_iacross += auto8E97BB58_ai ) {
            libNtve_gf_CreateDialogItemButton(DialogLastCreated(), gv_buttonWidth, gv_buttonWidth, c_anchorTopLeft, lv_x, lv_y, gv_buttonUpgradeTooltip[gv_iUnit], StringExternal("Param/Value/8DFFB955"), "");
            gv_buttonUpgrade[gv_iUnit][gv_iPlayer] = DialogControlLastCreated();
            gf_Colorbuttonsredblue(DialogControlLastCreated(), gv_iPlayer);
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), gv_buttonImageWidth, gv_buttonImageHeight, c_anchorTopLeft, (lv_x + 2), (lv_y + 2), StringExternal("Param/Value/1180C2B5"), gv_buttonUpgradeFile[gv_iUnit], c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
            gv_buttonUpgradeImage[gv_iUnit][gv_iPlayer] = DialogControlLastCreated();
            gv_iUnit += 1;
            while ((gv_upgradeLevel[gv_iUnit] > 1)) {
                libNtve_gf_CreateDialogItemButton(DialogLastCreated(), gv_buttonWidth, gv_buttonWidth, c_anchorTopLeft, lv_x, lv_y, gv_buttonUpgradeTooltip[gv_iUnit], StringExternal("Param/Value/8D21F3A0"), "");
                gv_buttonUpgrade[gv_iUnit][gv_iPlayer] = DialogControlLastCreated();
                DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
                gf_Colorbuttonsredblue(DialogControlLastCreated(), gv_iPlayer);
                libNtve_gf_CreateDialogItemImage(DialogLastCreated(), gv_buttonImageWidth, gv_buttonImageHeight, c_anchorTopLeft, (lv_x + 2), (lv_y + 2), StringExternal("Param/Value/4EC7C143"), gv_buttonUpgradeFile[gv_iUnit], c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
                DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
                gv_buttonUpgradeImage[gv_iUnit][gv_iPlayer] = DialogControlLastCreated();
                gv_iUnit += 1;
            }
            if ((gv_upgradeLink[gv_iUnit] == null)) {
                gv_iUnit += 1;
                return ;
            }
            else {
            }
            lv_x += gv_buttonWidth;
        }
        lv_y += gv_buttonHeight;
    }
}

void gf_Createbuttonsforraces () {
    // Variable Declarations
    int lv_x;
    int lv_y;

    // Variable Initialization

    // Implementation
    lv_x = gv_xYOffset;
    lv_y = gv_xYOffset;
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 160, 40, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/A75CD9B5"), StringExternal("Param/Value/61E9927B"), "");
    gv_buttonRace[1][gv_iPlayer] = DialogControlLastCreated();
    gf_Colorbuttonsredblue(DialogControlLastCreated(), gv_iPlayer);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 160, 40, c_anchorTopLeft, 50, 39, StringExternal("Param/Value/D7F565A2"), ColorWithAlpha(0,0,0,0), false, 2.0);
    lv_x += 160;
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 160, 40, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/61203EB8"), StringExternal("Param/Value/E6C31F3E"), "");
    gv_buttonRace[2][gv_iPlayer] = DialogControlLastCreated();
    gf_Colorbuttonsredblue(DialogControlLastCreated(), gv_iPlayer);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 160, 40, c_anchorTopLeft, 215, 39, StringExternal("Param/Value/1384EA37"), ColorWithAlpha(0,0,0,0), false, 2.0);
    lv_x += 160;
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 160, 40, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/C3EFF330"), StringExternal("Param/Value/9BF2CBC9"), "");
    gv_buttonRace[3][gv_iPlayer] = DialogControlLastCreated();
    gf_Colorbuttonsredblue(DialogControlLastCreated(), gv_iPlayer);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 160, 40, c_anchorTopLeft, 390, 39, StringExternal("Param/Value/AAC34D22"), ColorWithAlpha(0,0,0,0), false, 2.0);
}

void gf_Createbuttonsforplayer () {
    // Variable Declarations
    int lv_x;
    int lv_y;

    // Variable Initialization

}

void gf_Createbuttonsforsubmenuterrain () {
    // Variable Declarations
    int lv_x;
    int lv_y;

    // Variable Initialization
    lv_x = gv_xYOffset;
    lv_y = gv_xYOffset;

    // Implementation
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), gv_buttonLabelWidth, gv_buttonLabelHeight, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/FC902F0D"), StringExternal("Param/Value/CAA061EB"), "");
    gv_buttonTerrain[1] = DialogControlLastCreated();
    lv_x += gv_buttonLabelWidth;
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), gv_buttonLabelWidth, gv_buttonLabelHeight, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/C407C143"), StringExternal("Param/Value/2990454C"), "");
    gv_buttonTerrain[5] = DialogControlLastCreated();
    lv_x += gv_buttonLabelWidth;
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), gv_buttonLabelWidth, gv_buttonLabelHeight, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/9FBDCFF7"), StringExternal("Param/Value/EC9AB49F"), "");
    gv_buttonTerrain[3] = DialogControlLastCreated();
    lv_x += gv_buttonLabelWidth;
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), gv_buttonLabelWidth, gv_buttonLabelHeight, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/A83060A8"), StringExternal("Param/Value/F34701EE"), "");
    gv_buttonTerrain[4] = DialogControlLastCreated();
    lv_x += gv_buttonLabelWidth;
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), gv_buttonLabelWidth, gv_buttonLabelHeight, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/128DF953"), StringExternal("Param/Value/39DC09B8"), "");
    gv_buttonTerrain[6] = DialogControlLastCreated();
    lv_x += gv_buttonLabelWidth;
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), gv_buttonLabelWidth, gv_buttonLabelHeight, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/7157C284"), StringExternal("Param/Value/6AFD3A34"), "");
    gv_buttonTerrain[7] = DialogControlLastCreated();
    lv_x += gv_buttonLabelWidth;
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), gv_buttonLabelWidth, gv_buttonLabelHeight, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/629206CE"), StringExternal("Param/Value/1D3EDD2E"), "");
    gv_buttonTerrain[2] = DialogControlLastCreated();
    lv_x += gv_buttonLabelWidth;
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), gv_buttonLabelWidth, gv_buttonLabelHeight, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/AE4A4410"), StringExternal("Param/Value/BA99F0D5"), "");
    gv_buttonTerrain[8] = DialogControlLastCreated();
    lv_x += gv_buttonLabelWidth;
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), gv_buttonLabelWidth, gv_buttonLabelHeight, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/6364CD45"), StringExternal("Param/Value/D25A6609"), "");
    gv_buttonTerrain[9] = DialogControlLastCreated();
    lv_x += gv_buttonLabelWidth;
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), gv_buttonLabelWidth, gv_buttonLabelHeight, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/BB40FA9E"), StringExternal("Param/Value/DEF9F54B"), "");
    gv_buttonTerrain[10] = DialogControlLastCreated();
}

void gf_Createbuttonsforsubmenusave () {
    int auto255395CD_ae;
    int auto255395CD_ai;

    // Variable Declarations
    int lv_x;
    int lv_y;

    // Variable Initialization
    lv_x = gv_xYOffset;
    lv_y = gv_xYOffset;

    // Implementation
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), gv_buttonLabelWidth, gv_buttonLabelHeight, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/112A62C7"), StringExternal("Param/Value/74EACF6F"), "");
    gv_buttonSave[0] = DialogControlLastCreated();
    lv_x += gv_buttonLabelWidth;
    auto255395CD_ae = 9;
    auto255395CD_ai = 1;
    gv_iSlot = 1;
    for ( ; ( (auto255395CD_ai >= 0 && gv_iSlot <= auto255395CD_ae) || (auto255395CD_ai <= 0 && gv_iSlot >= auto255395CD_ae) ) ; gv_iSlot += auto255395CD_ai ) {
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), gv_buttonLabelWidth, gv_buttonLabelHeight, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/F4EFE02B"), (StringExternal("Param/Value/1CDAAAA5") + IntToText(gv_iSlot)), "");
        gv_buttonSave[gv_iSlot] = DialogControlLastCreated();
        lv_x += gv_buttonLabelWidth;
    }
}

void gf_Createbuttonsforsubmenuload () {
    int autoCD6E156F_ae;
    int autoCD6E156F_ai;

    // Variable Declarations
    int lv_x;
    int lv_y;

    // Variable Initialization
    lv_x = gv_xYOffset;
    lv_y = gv_xYOffset;

    // Implementation
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), gv_buttonLabelWidth, gv_buttonLabelHeight, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/1614E274"), StringExternal("Param/Value/A4466F20"), "");
    gv_buttonLoad[0] = DialogControlLastCreated();
    lv_x += gv_buttonLabelWidth;
    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupActive(), false);
    autoCD6E156F_ae = 9;
    autoCD6E156F_ai = 1;
    gv_iSlot = 1;
    for ( ; ( (autoCD6E156F_ai >= 0 && gv_iSlot <= autoCD6E156F_ae) || (autoCD6E156F_ai <= 0 && gv_iSlot >= autoCD6E156F_ae) ) ; gv_iSlot += autoCD6E156F_ai ) {
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), gv_buttonLabelWidth, gv_buttonLabelHeight, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/3F827266"), (StringExternal("Param/Value/32B4F107") + IntToText(gv_iSlot)), "");
        gv_buttonLoad[gv_iSlot] = DialogControlLastCreated();
        lv_x += gv_buttonLabelWidth;
        DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupActive(), false);
    }
}

void gf_Createbuttonsforsubmenuoptions () {
    // Implementation
    DialogSetTitle(DialogLastCreated(), StringExternal("Param/Value/133AE62C"));
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 500, 100, c_anchorTopLeft, gv_xYOffset, gv_buttonY, StringExternal("Param/Value/8D02F95E"), Color(100,100,100), false, 2.0);
    gv_buttonY += 80;
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 500, 25, c_anchorTopLeft, gv_xYOffset, gv_buttonY, StringExternal("Param/Value/EC544F60"), Color(100,100,100), false, 2.0);
    gf_Createbuttonon();
    gv_buttonOptionVision[1] = DialogControlLastCreated();
    gf_Createbuttonoff();
    gv_buttonOptionVision[0] = DialogControlLastCreated();
    gv_buttonY += 40;
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 500, 25, c_anchorTopLeft, gv_xYOffset, gv_buttonY, StringExternal("Param/Value/A469F5AE"), Color(100,100,100), false, 2.0);
    gv_buttonY += 20;
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 100, gv_buttonLabelHeight, c_anchorTopLeft, 62, gv_buttonY, StringExternal("Param/Value/9B6B4215"), StringExternal("Param/Value/21F9F71F"), "");
    gv_buttonOptionUpgrade[0] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 100, gv_buttonLabelHeight, c_anchorTopLeft, 187, gv_buttonY, StringExternal("Param/Value/BCB802C9"), StringExternal("Param/Value/7255E0BA"), "");
    gv_buttonOptionUpgrade[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 100, gv_buttonLabelHeight, c_anchorTopLeft, 312, gv_buttonY, StringExternal("Param/Value/31928E2C"), StringExternal("Param/Value/4818470D"), "");
    gv_buttonOptionUpgrade[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 100, gv_buttonLabelHeight, c_anchorTopLeft, 437, gv_buttonY, StringExternal("Param/Value/82615C97"), StringExternal("Param/Value/2CE8DF58"), "");
    gv_buttonOptionUpgrade[3] = DialogControlLastCreated();
    gv_buttonY += 60;
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 500, 25, c_anchorTopLeft, gv_xYOffset, gv_buttonY, StringExternal("Param/Value/647905EF"), Color(100,100,100), false, 2.0);
    gf_Createbuttonon();
    gv_buttonOptionAbility[1] = DialogControlLastCreated();
    gf_Createbuttonoff();
    gv_buttonOptionAbility[0] = DialogControlLastCreated();
    gv_buttonY += 60;
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 500, 25, c_anchorTopLeft, gv_xYOffset, gv_buttonY, StringExternal("Param/Value/87EBDE2D"), Color(100,100,100), false, 2.0);
    gf_Createbuttonon();
    gv_buttonOptionEnergy[1] = DialogControlLastCreated();
    gf_Createbuttonoff();
    gv_buttonOptionEnergy[0] = DialogControlLastCreated();
    gv_buttonY += 60;
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 500, 25, c_anchorTopLeft, gv_xYOffset, gv_buttonY, StringExternal("Param/Value/F1F024B8"), Color(100,100,100), false, 2.0);
    gf_Createbuttonon();
    gv_buttonOptionInstant[1] = DialogControlLastCreated();
    gf_Createbuttonoff();
    gv_buttonOptionInstant[0] = DialogControlLastCreated();
    gv_buttonY += 60;
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 500, 25, c_anchorTopLeft, gv_xYOffset, gv_buttonY, StringExternal("Param/Value/5EDDFD99"), Color(100,100,100), false, 2.0);
    gf_Createbuttonon();
    gv_buttonOptionCreep[1] = DialogControlLastCreated();
    gf_Createbuttonoff();
    gv_buttonOptionCreep[0] = DialogControlLastCreated();
    gv_buttonY += 60;
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 500, 25, c_anchorTopLeft, gv_xYOffset, gv_buttonY, StringExternal("Param/Value/5E58995A"), Color(100,100,100), false, 2.0);
    gf_Createbuttonon();
    gv_buttonOptionPanel[1] = DialogControlLastCreated();
    gf_Createbuttonoff();
    gv_buttonOptionPanel[0] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), gv_buttonLabelWidth, gv_buttonLabelHeight, c_anchorBottom, 0, gv_xYOffset, StringExternal("Param/Value/5E7B9FE6"), StringExternal("Param/Value/56B23B34"), "");
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), gv_buttonLabelWidth, gv_buttonLabelHeight, c_anchorBottom, 0, gv_xYOffset, StringExternal("Param/Value/D38C166B"), StringExternal("Param/Value/7138C550"), "");
    gv_buttonClose = DialogControlLastCreated();
}

void gf_Createbuttonsforsubmenualliances () {
    int autoD226F20B_ae;
    int autoD226F20B_ai;

    // Variable Declarations
    int lv_iplayer;
    int lv_y;

    // Variable Initialization
    lv_y = 100;

    // Implementation
    DialogSetTitle(DialogLastCreated(), StringExternal("Param/Value/DD9E1811"));
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 100, 100, c_anchorTopLeft, 300, lv_y, StringExternal("Param/Value/6ED7563A"), Color(100,100,100), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 100, 100, c_anchorTopLeft, 400, lv_y, StringExternal("Param/Value/01BF0BEA"), Color(100.00, 0.00, 0.00), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 100, 100, c_anchorTopLeft, 500, lv_y, StringExternal("Param/Value/4B1C4795"), Color(0,66*100/255,100), false, 2.0);
    autoD226F20B_ae = 8;
    autoD226F20B_ai = 1;
    lv_iplayer = 1;
    for ( ; ( (autoD226F20B_ai >= 0 && lv_iplayer <= autoD226F20B_ae) || (autoD226F20B_ai <= 0 && lv_iplayer >= autoD226F20B_ae) ) ; lv_iplayer += autoD226F20B_ai ) {
        lv_y += 60;
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, 50, lv_y, PlayerName(lv_iplayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_iplayer, false)), false, 2.0);
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 50, 50, c_anchorTopLeft, 300, lv_y, (StringExternal("Param/Value/A26EAEE7") + IntToText(lv_iplayer)), StringExternal("Param/Value/40EA551D"), "");
        gv_checkbox[lv_iplayer] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 50, 50, c_anchorTopLeft, 400, lv_y, (StringExternal("Param/Value/8AE84D89") + IntToText(lv_iplayer)), StringExternal("Param/Value/B2165835"), "");
        gv_checkboxRed[lv_iplayer] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 50, 50, c_anchorTopLeft, 500, lv_y, (StringExternal("Param/Value/72AB09DA") + IntToText(lv_iplayer)), StringExternal("Param/Value/C82B814E"), "");
        gv_checkboxBlue[lv_iplayer] = DialogControlLastCreated();
    }
}

void gf_Createbuttonsforsubmenufilename () {
    // Variable Declarations
    int lv_x;
    int lv_y;

    // Variable Initialization
    lv_x = gv_xYOffset;
    lv_y = gv_xYOffset;

    // Implementation
    DialogSetTitle(DialogLastCreated(), StringExternal("Param/Value/3FE302A9"));
    lv_y += gv_buttonLabelHeight;
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeEditBox);
    gv_editBox = DialogControlLastCreated();
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, lv_x, lv_y);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupActive(), 480, gv_buttonHeight);
    lv_y += gv_buttonHeight;
    lv_x += gv_buttonLabelWidth;
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), gv_buttonLabelWidth, gv_buttonLabelHeight, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/9E8FEE6B"), StringExternal("Param/Value/5FFC9FF2"), "");
    gv_buttonOK = DialogControlLastCreated();
    lv_x += gv_buttonLabelWidth;
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), gv_buttonLabelWidth, gv_buttonLabelHeight, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/E076CA65"), StringExternal("Param/Value/1170F064"), "");
    gv_buttonCancel = DialogControlLastCreated();
}

trigger auto_gf_Colorbuttonsredblue_Trigger = null;
int auto_gf_Colorbuttonsredblue_lp_inputDialogItem;
int auto_gf_Colorbuttonsredblue_lp_inputIPlayer;

void gf_Colorbuttonsredblue (int lp_inputDialogItem, int lp_inputIPlayer) {
    auto_gf_Colorbuttonsredblue_lp_inputDialogItem = lp_inputDialogItem;
    auto_gf_Colorbuttonsredblue_lp_inputIPlayer = lp_inputIPlayer;

    if (auto_gf_Colorbuttonsredblue_Trigger == null) {
        auto_gf_Colorbuttonsredblue_Trigger = TriggerCreate("auto_gf_Colorbuttonsredblue_TriggerFunc");
    }

    TriggerExecute(auto_gf_Colorbuttonsredblue_Trigger, false, false);
}

bool auto_gf_Colorbuttonsredblue_TriggerFunc (bool testConds, bool runActions) {
    int lp_inputDialogItem = auto_gf_Colorbuttonsredblue_lp_inputDialogItem;
    int lp_inputIPlayer = auto_gf_Colorbuttonsredblue_lp_inputIPlayer;

    // Implementation
    if ((lp_inputIPlayer == 0)) {
        libNtve_gf_SetDialogItemImage(lp_inputDialogItem, "Assets\\Textures\\ui_button_generic_normalpressed_zerg.dds", PlayerGroupActive());
        libNtve_gf_SetDialogItemImage2(lp_inputDialogItem, "Assets\\Textures\\ui_button_generic_normaloverpressedover_zerg.dds", PlayerGroupActive());
        libNtve_gf_SetDialogItemColor(lp_inputDialogItem, Color(100.00, 0.00, 0.00), PlayerGroupActive());
    }
    else {
        libNtve_gf_SetDialogItemImage(lp_inputDialogItem, "Assets\\Textures\\ui_button_generic_normalpressed_protoss.dds", PlayerGroupActive());
        libNtve_gf_SetDialogItemImage2(lp_inputDialogItem, "Assets\\Textures\\ui_button_generic_normaloverpressedover_protoss.dds", PlayerGroupActive());
    }
    return true;
}

void gf_Createbuttonoff () {
    // Implementation
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), gv_buttonLabelWidth, gv_buttonLabelHeight, c_anchorTopLeft, 460, gv_buttonY, StringExternal("Param/Value/2BAA0496"), StringExternal("Param/Value/57511214"), "");
}

void gf_Createbuttonon () {
    // Implementation
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), gv_buttonLabelWidth, gv_buttonLabelHeight, c_anchorTopLeft, 340, gv_buttonY, StringExternal("Param/Value/CDD1F912"), StringExternal("Param/Value/66B0AE31"), "");
}

void gf_Createobserverpanel () {
    // Implementation
    DialogCreate(1600, 600, c_anchorTopLeft, 0, 525, true);
    gv_dialogPanel = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupActive(), true);
    DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypePanel, "LeaderPanel/LeaderPanelTemplate");
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 1600, 600);
}

void gf_InitLeaderboard () {
    int autoEC205702_ae;
    int autoEC205702_ai;
    int auto09B3CB5C_ae;
    int auto09B3CB5C_ai;

    // Variable Declarations
    int lv_column;
    int lv_row;

    // Variable Initialization

    // Implementation
    BoardDestroy(gv_leaderboard);
    BoardDestroy(gv_leaderboard);
    BoardDestroy(gv_leaderboard);
    DataTableClear(true);
    gv_rowCount = 4;
    gv_totalMineral[1] = 0;
    gv_totalMineral[2] = 0;
    gv_totalVespene[1] = 0;
    gv_totalVespene[2] = 0;
    autoEC205702_ae = 2;
    autoEC205702_ai = 1;
    lv_column = 1;
    for ( ; ( (autoEC205702_ai >= 0 && lv_column <= autoEC205702_ae) || (autoEC205702_ai <= 0 && lv_column >= autoEC205702_ae) ) ; lv_column += autoEC205702_ai ) {
        auto09B3CB5C_ae = 21;
        auto09B3CB5C_ai = 1;
        lv_row = 5;
        for ( ; ( (auto09B3CB5C_ai >= 0 && lv_row <= auto09B3CB5C_ae) || (auto09B3CB5C_ai <= 0 && lv_row >= auto09B3CB5C_ae) ) ; lv_row += auto09B3CB5C_ai ) {
            gv_iconFlag[lv_column][lv_row] = false;
        }
    }
    BoardCreate(2, gv_rowCount, StringExternal("Param/Value/77748292"), Color(100.00, 100.00, 100.00));
    gv_leaderboard = BoardLastCreated();
    BoardItemSetAlignment(BoardLastCreated(), c_boardItemAll, c_boardItemAll, c_alignCenter);
    BoardItemSetText(BoardLastCreated(), 1, c_boardRowHeader, StringExternal("Param/Value/45BDFD34"));
    BoardItemSetText(BoardLastCreated(), 2, c_boardRowHeader, StringExternal("Param/Value/E1DCD971"));
    BoardSetColumnWidth(BoardLastCreated(), 1, c_boardWidthAuto);
    BoardSetColumnWidth(BoardLastCreated(), 2, c_boardWidthAuto);
    BoardItemSetText(BoardLastCreated(), 1, 1, StringExternal("Param/Value/E7F7F5BD"));
    BoardItemSetText(BoardLastCreated(), 2, 1, StringExternal("Param/Value/823E8C88"));
    BoardItemSetIcon(BoardLastCreated(), 1, 1, "Assets\\Textures\\icon-mineral-protoss.dds", true);
    BoardItemSetIcon(BoardLastCreated(), 2, 1, "Assets\\Textures\\icon-mineral-protoss.dds", true);
    BoardItemSetTextColor(BoardLastCreated(), 1, 1, Color(0.00, 100.00, 100.00));
    BoardItemSetTextColor(BoardLastCreated(), 2, 1, Color(0.00, 100.00, 100.00));
    BoardItemSetText(BoardLastCreated(), 1, 2, StringExternal("Param/Value/AFD0D060"));
    BoardItemSetText(BoardLastCreated(), 2, 2, StringExternal("Param/Value/CAE5B9C9"));
    BoardItemSetIcon(BoardLastCreated(), 1, 2, "Assets\\Textures\\icon-gas-terran.dds", true);
    BoardItemSetIcon(BoardLastCreated(), 2, 2, "Assets\\Textures\\icon-gas-terran.dds", true);
    BoardItemSetTextColor(BoardLastCreated(), 1, 2, Color(0.00, 100.00, 25.10));
    BoardItemSetTextColor(BoardLastCreated(), 2, 2, Color(0.00, 100.00, 25.10));
    BoardItemSetText(BoardLastCreated(), 1, 3, StringExternal("Param/Value/0D9BD4FF"));
    BoardItemSetText(BoardLastCreated(), 2, 3, StringExternal("Param/Value/E5544B75"));
    BoardItemSetIcon(BoardLastCreated(), 1, 3, "Assets\\Textures\\icon-supply-zerg.dds", true);
    BoardItemSetIcon(BoardLastCreated(), 2, 3, "Assets\\Textures\\icon-supply-zerg.dds", true);
    BoardItemSetTextColor(BoardLastCreated(), 1, 3, Color(100.00, 50.20, 0.00));
    BoardItemSetTextColor(BoardLastCreated(), 2, 3, Color(100.00, 50.20, 0.00));
}

bool gf_ValidUnitType (string lp_inputUnitType) {
    // Implementation
    if (((UnitTypeTestFlag(lp_inputUnitType, c_unitFlagInvulnerable) == true) || (UnitTypeTestFlag(lp_inputUnitType, c_unitFlagMissile) == true) || (lp_inputUnitType == "Drone2") || (lp_inputUnitType == "Larva") || (lp_inputUnitType == "BroodlingEscort") || (lp_inputUnitType == "CreepTumor") || (lp_inputUnitType == "CreepTumorBurrowed") || (lp_inputUnitType == "Broodling") || (lp_inputUnitType == "Interceptor") || (lp_inputUnitType == "Nuke") || (lp_inputUnitType == "SupplyDepotLowered") || (lp_inputUnitType == "DestructibleRock4x4"))) {
        return false;
    }
    else {
        return true;
    }
}

int gf_AddLeaderboardRow (string lp_inputUnitName) {
    // Implementation
    if ((gv_rowCount < 21)) {
        gv_rowCount += 1;
        BoardSetRowCount(gv_leaderboard, gv_rowCount);
    }
    else {
    }
    DataTableSetInt(true, lp_inputUnitName, gv_rowCount);
    return gv_rowCount;
}

trigger auto_gf_AddLeaderboardIcon_Trigger = null;
string auto_gf_AddLeaderboardIcon_lp_inputUnitType;
int auto_gf_AddLeaderboardIcon_lp_inputColumn;
int auto_gf_AddLeaderboardIcon_lp_inputRow;

void gf_AddLeaderboardIcon (string lp_inputUnitType, int lp_inputColumn, int lp_inputRow) {
    auto_gf_AddLeaderboardIcon_lp_inputUnitType = lp_inputUnitType;
    auto_gf_AddLeaderboardIcon_lp_inputColumn = lp_inputColumn;
    auto_gf_AddLeaderboardIcon_lp_inputRow = lp_inputRow;

    if (auto_gf_AddLeaderboardIcon_Trigger == null) {
        auto_gf_AddLeaderboardIcon_Trigger = TriggerCreate("auto_gf_AddLeaderboardIcon_TriggerFunc");
    }

    TriggerExecute(auto_gf_AddLeaderboardIcon_Trigger, false, false);
}

bool auto_gf_AddLeaderboardIcon_TriggerFunc (bool testConds, bool runActions) {
    string lp_inputUnitType = auto_gf_AddLeaderboardIcon_lp_inputUnitType;
    int lp_inputColumn = auto_gf_AddLeaderboardIcon_lp_inputColumn;
    int lp_inputRow = auto_gf_AddLeaderboardIcon_lp_inputRow;

    int auto4E7B7027_ae;
    int auto4E7B7027_ai;

    // Implementation
    if ((UnitTypeTestAttribute(lp_inputUnitType, c_unitAttributeStructure) == false)) {
        auto4E7B7027_ae = 60;
        auto4E7B7027_ai = 1;
        gv_iUnit = 0;
        for ( ; ( (auto4E7B7027_ai >= 0 && gv_iUnit <= auto4E7B7027_ae) || (auto4E7B7027_ai <= 0 && gv_iUnit >= auto4E7B7027_ae) ) ; gv_iUnit += auto4E7B7027_ai ) {
            if ((gv_unitLink[gv_iUnit] == lp_inputUnitType)) {
                BoardItemSetIcon(gv_leaderboard, lp_inputColumn, lp_inputRow, gv_buttonUnitFile[gv_iUnit], true);
                gv_iconFlag[lp_inputColumn][lp_inputRow] = true;
                return true;
            }
            else {
            }
        }
    }
    else {
        BoardItemSetIcon(gv_leaderboard, lp_inputColumn, lp_inputRow, gf_ConvertUnitTypeStructuretoIcon(lp_inputUnitType), true);
        gv_iconFlag[lp_inputColumn][lp_inputRow] = true;
    }
    return true;
}

bool gf_SpecialUnitType (string lp_inputUnitType) {
    // Implementation
    if (((lp_inputUnitType == "Archon") || (lp_inputUnitType == "Carrier"))) {
        return true;
    }
    else {
        return false;
    }
}

void gf_SpecialUnitCost (string lp_inputUnitType, int lp_inputColumn, bool lp_deleteMode) {
    string auto0E11D460_val;

    // Variable Declarations
    int lv_mineralsmodifier;
    int lv_vespenemodifer;

    // Variable Initialization

    // Implementation
    auto0E11D460_val = lp_inputUnitType;
    if (auto0E11D460_val == "Archon") {
        lv_mineralsmodifier = -75;
        lv_vespenemodifer = 25;
    }
    else if (auto0E11D460_val == "Carrier") {
        lv_mineralsmodifier = 100;
        lv_vespenemodifer = 0;
    }
    else {
    }
    if ((lp_deleteMode == true)) {
        lv_mineralsmodifier *= -1;
        lv_vespenemodifer *= -1;
    }
    else {
    }
    gv_totalMineral[lp_inputColumn] += lv_mineralsmodifier;
    gv_totalVespene[lp_inputColumn] += lv_vespenemodifer;
}

void gf_FadeButtons () {
    int autoACCC3453_ae;
    int autoACCC3453_ai;

    // Variable Declarations
    int lv_iplayer;

    // Variable Initialization

    // Implementation
    if ((gv_allAbilities == 0)) {
        DialogControlFadeTransparency(gv_buttonOptionAbility[0], PlayerGroupActive(), 0.0, 0.0);
        DialogControlFadeTransparency(gv_buttonOptionAbility[1], PlayerGroupActive(), 0.0, 75.0);
    }
    else {
        DialogControlFadeTransparency(gv_buttonOptionAbility[0], PlayerGroupActive(), 0.0, 75.0);
        DialogControlFadeTransparency(gv_buttonOptionAbility[1], PlayerGroupActive(), 0.0, 0.0);
    }
    if ((gv_energy == true)) {
        DialogControlFadeTransparency(gv_buttonOptionEnergy[0], PlayerGroupActive(), 0.0, 75.0);
        DialogControlFadeTransparency(gv_buttonOptionEnergy[1], PlayerGroupActive(), 0.0, 0.0);
    }
    else {
        DialogControlFadeTransparency(gv_buttonOptionEnergy[0], PlayerGroupActive(), 0.0, 0.0);
        DialogControlFadeTransparency(gv_buttonOptionEnergy[1], PlayerGroupActive(), 0.0, 75.0);
    }
    if ((gv_allUpgrades == 0)) {
        DialogControlFadeTransparency(gv_buttonOptionUpgrade[0], PlayerGroupActive(), 0.0, 0.0);
        DialogControlFadeTransparency(gv_buttonOptionUpgrade[1], PlayerGroupActive(), 0.0, 75.0);
        DialogControlFadeTransparency(gv_buttonOptionUpgrade[2], PlayerGroupActive(), 0.0, 75.0);
        DialogControlFadeTransparency(gv_buttonOptionUpgrade[3], PlayerGroupActive(), 0.0, 75.0);
    }
    else {
    }
    if ((gv_allUpgrades == 1)) {
        DialogControlFadeTransparency(gv_buttonOptionUpgrade[0], PlayerGroupActive(), 0.0, 75.0);
        DialogControlFadeTransparency(gv_buttonOptionUpgrade[1], PlayerGroupActive(), 0.0, 0.0);
        DialogControlFadeTransparency(gv_buttonOptionUpgrade[2], PlayerGroupActive(), 0.0, 75.0);
        DialogControlFadeTransparency(gv_buttonOptionUpgrade[3], PlayerGroupActive(), 0.0, 75.0);
    }
    else {
    }
    if ((gv_allUpgrades == 2)) {
        DialogControlFadeTransparency(gv_buttonOptionUpgrade[0], PlayerGroupActive(), 0.0, 75.0);
        DialogControlFadeTransparency(gv_buttonOptionUpgrade[1], PlayerGroupActive(), 0.0, 75.0);
        DialogControlFadeTransparency(gv_buttonOptionUpgrade[2], PlayerGroupActive(), 0.0, 0.0);
        DialogControlFadeTransparency(gv_buttonOptionUpgrade[3], PlayerGroupActive(), 0.0, 75.0);
    }
    else {
    }
    if ((gv_allUpgrades == 3)) {
        DialogControlFadeTransparency(gv_buttonOptionUpgrade[0], PlayerGroupActive(), 0.0, 75.0);
        DialogControlFadeTransparency(gv_buttonOptionUpgrade[1], PlayerGroupActive(), 0.0, 75.0);
        DialogControlFadeTransparency(gv_buttonOptionUpgrade[2], PlayerGroupActive(), 0.0, 75.0);
        DialogControlFadeTransparency(gv_buttonOptionUpgrade[3], PlayerGroupActive(), 0.0, 0.0);
    }
    else {
    }
    if ((gv_revealers == true)) {
        DialogControlFadeTransparency(gv_buttonOptionVision[0], PlayerGroupActive(), 0.0, 75.0);
        DialogControlFadeTransparency(gv_buttonOptionVision[1], PlayerGroupActive(), 0.0, 0.0);
    }
    else {
        DialogControlFadeTransparency(gv_buttonOptionVision[0], PlayerGroupActive(), 0.0, 0.0);
        DialogControlFadeTransparency(gv_buttonOptionVision[1], PlayerGroupActive(), 0.0, 75.0);
    }
    if ((gv_instant == true)) {
        DialogControlFadeTransparency(gv_buttonOptionInstant[1], PlayerGroupActive(), 0.0, 0.0);
        DialogControlFadeTransparency(gv_buttonOptionInstant[0], PlayerGroupActive(), 0.0, 75.0);
    }
    else {
        DialogControlFadeTransparency(gv_buttonOptionInstant[1], PlayerGroupActive(), 0.0, 75.0);
        DialogControlFadeTransparency(gv_buttonOptionInstant[0], PlayerGroupActive(), 0.0, 0.0);
    }
    if ((gv_fastCreep == true)) {
        DialogControlFadeTransparency(gv_buttonOptionCreep[1], PlayerGroupActive(), 0.0, 0.0);
        DialogControlFadeTransparency(gv_buttonOptionCreep[0], PlayerGroupActive(), 0.0, 75.0);
    }
    else {
        DialogControlFadeTransparency(gv_buttonOptionCreep[1], PlayerGroupActive(), 0.0, 75.0);
        DialogControlFadeTransparency(gv_buttonOptionCreep[0], PlayerGroupActive(), 0.0, 0.0);
    }
    if ((DialogIsVisible(gv_dialogPanel, 1) == true)) {
        DialogControlFadeTransparency(gv_buttonOptionPanel[1], PlayerGroupActive(), 0.0, 0.0);
        DialogControlFadeTransparency(gv_buttonOptionPanel[0], PlayerGroupActive(), 0.0, 75.0);
    }
    else {
        DialogControlFadeTransparency(gv_buttonOptionPanel[1], PlayerGroupActive(), 0.0, 75.0);
        DialogControlFadeTransparency(gv_buttonOptionPanel[0], PlayerGroupActive(), 0.0, 0.0);
    }
    autoACCC3453_ae = 8;
    autoACCC3453_ai = 1;
    lv_iplayer = 1;
    for ( ; ( (autoACCC3453_ai >= 0 && lv_iplayer <= autoACCC3453_ae) || (autoACCC3453_ai <= 0 && lv_iplayer >= autoACCC3453_ae) ) ; lv_iplayer += autoACCC3453_ai ) {
        if ((PlayerGetPropertyInt(lv_iplayer, c_playerPropCredits) == 1)) {
            DialogControlFadeTransparency(gv_checkbox[lv_iplayer], PlayerGroupActive(), 0.0, 0.0);
        }
        else {
            DialogControlFadeTransparency(gv_checkbox[lv_iplayer], PlayerGroupActive(), 0.0, 75.0);
        }
        if ((gv_controlRed[lv_iplayer] == true)) {
            DialogControlFadeTransparency(gv_checkboxRed[lv_iplayer], PlayerGroupActive(), 0.0, 0.0);
        }
        else {
            DialogControlFadeTransparency(gv_checkboxRed[lv_iplayer], PlayerGroupActive(), 0.0, 75.0);
        }
        if ((gv_controlBlue[lv_iplayer] == true)) {
            DialogControlFadeTransparency(gv_checkboxBlue[lv_iplayer], PlayerGroupActive(), 0.0, 0.0);
        }
        else {
            DialogControlFadeTransparency(gv_checkboxBlue[lv_iplayer], PlayerGroupActive(), 0.0, 75.0);
        }
    }
}

void gf_OptionsAction () {
    int auto8F5BECFB_val;

    // Implementation
    auto8F5BECFB_val = EventDialogControl();
    if (auto8F5BECFB_val == gv_buttonClose) {
        gf_ShowhideOptionsAlliances();
    }
    else if (auto8F5BECFB_val == gv_buttonOptionAbility[0]) {
        DialogControlFadeTransparency(gv_buttonOptionAbility[0], PlayerGroupActive(), 0.5, 0.0);
        DialogControlFadeTransparency(gv_buttonOptionAbility[1], PlayerGroupActive(), 0.5, 75.0);
        gf_AllAbilitiesOff();
    }
    else if (auto8F5BECFB_val == gv_buttonOptionAbility[1]) {
        DialogControlFadeTransparency(gv_buttonOptionAbility[0], PlayerGroupActive(), 0.5, 75.0);
        DialogControlFadeTransparency(gv_buttonOptionAbility[1], PlayerGroupActive(), 0.5, 0.0);
        gf_AllAbilitiesOn();
    }
    else if (auto8F5BECFB_val == gv_buttonOptionEnergy[0]) {
        DialogControlFadeTransparency(gv_buttonOptionEnergy[0], PlayerGroupActive(), 0.5, 0.0);
        DialogControlFadeTransparency(gv_buttonOptionEnergy[1], PlayerGroupActive(), 0.5, 75.0);
        gv_energy = false;
    }
    else if (auto8F5BECFB_val == gv_buttonOptionEnergy[1]) {
        DialogControlFadeTransparency(gv_buttonOptionEnergy[0], PlayerGroupActive(), 0.5, 75.0);
        DialogControlFadeTransparency(gv_buttonOptionEnergy[1], PlayerGroupActive(), 0.5, 0.0);
        gv_energy = true;
        gf_Energy();
    }
    else if (auto8F5BECFB_val == gv_buttonOptionUpgrade[0]) {
        DialogControlFadeTransparency(gv_buttonOptionUpgrade[0], PlayerGroupActive(), 0.5, 0.0);
        DialogControlFadeTransparency(gv_buttonOptionUpgrade[1], PlayerGroupActive(), 0.5, 75.0);
        DialogControlFadeTransparency(gv_buttonOptionUpgrade[2], PlayerGroupActive(), 0.5, 75.0);
        DialogControlFadeTransparency(gv_buttonOptionUpgrade[3], PlayerGroupActive(), 0.5, 75.0);
        gv_allUpgrades = 0;
        gf_UpgradeLvlResetAll();
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (StringExternal("Param/Value/CB2EC69E")));
    }
    else if (auto8F5BECFB_val == gv_buttonOptionUpgrade[1]) {
        DialogControlFadeTransparency(gv_buttonOptionUpgrade[0], PlayerGroupActive(), 0.5, 75.0);
        DialogControlFadeTransparency(gv_buttonOptionUpgrade[1], PlayerGroupActive(), 0.5, 0.0);
        DialogControlFadeTransparency(gv_buttonOptionUpgrade[2], PlayerGroupActive(), 0.5, 75.0);
        DialogControlFadeTransparency(gv_buttonOptionUpgrade[3], PlayerGroupActive(), 0.5, 75.0);
        gv_allUpgrades = 1;
        gf_UpgradeLvlResetAll();
        gf_UpgradeLvl();
    }
    else if (auto8F5BECFB_val == gv_buttonOptionUpgrade[2]) {
        DialogControlFadeTransparency(gv_buttonOptionUpgrade[0], PlayerGroupActive(), 0.5, 75.0);
        DialogControlFadeTransparency(gv_buttonOptionUpgrade[1], PlayerGroupActive(), 0.5, 75.0);
        DialogControlFadeTransparency(gv_buttonOptionUpgrade[2], PlayerGroupActive(), 0.5, 0.0);
        DialogControlFadeTransparency(gv_buttonOptionUpgrade[3], PlayerGroupActive(), 0.5, 75.0);
        gv_allUpgrades = 2;
        gf_UpgradeLvlResetAll();
        gf_UpgradeLvl();
    }
    else if (auto8F5BECFB_val == gv_buttonOptionUpgrade[3]) {
        DialogControlFadeTransparency(gv_buttonOptionUpgrade[0], PlayerGroupActive(), 0.5, 75.0);
        DialogControlFadeTransparency(gv_buttonOptionUpgrade[1], PlayerGroupActive(), 0.5, 75.0);
        DialogControlFadeTransparency(gv_buttonOptionUpgrade[2], PlayerGroupActive(), 0.5, 75.0);
        DialogControlFadeTransparency(gv_buttonOptionUpgrade[3], PlayerGroupActive(), 0.5, 0.0);
        gv_allUpgrades = 3;
        gf_UpgradeLvl();
    }
    else if (auto8F5BECFB_val == gv_buttonOptionVision[0]) {
        DialogControlFadeTransparency(gv_buttonOptionVision[0], PlayerGroupActive(), 0.5, 0.0);
        DialogControlFadeTransparency(gv_buttonOptionVision[1], PlayerGroupActive(), 0.5, 75.0);
        gf_RevealersOff();
    }
    else if (auto8F5BECFB_val == gv_buttonOptionVision[1]) {
        DialogControlFadeTransparency(gv_buttonOptionVision[0], PlayerGroupActive(), 0.5, 75.0);
        DialogControlFadeTransparency(gv_buttonOptionVision[1], PlayerGroupActive(), 0.5, 0.0);
        gf_RevealersOn();
    }
    else if (auto8F5BECFB_val == gv_buttonOptionInstant[1]) {
        DialogControlFadeTransparency(gv_buttonOptionInstant[1], PlayerGroupActive(), 0.5, 0.0);
        DialogControlFadeTransparency(gv_buttonOptionInstant[0], PlayerGroupActive(), 0.5, 75.0);
        gv_instant = true;
    }
    else if (auto8F5BECFB_val == gv_buttonOptionInstant[0]) {
        DialogControlFadeTransparency(gv_buttonOptionInstant[1], PlayerGroupActive(), 0.5, 75.0);
        DialogControlFadeTransparency(gv_buttonOptionInstant[0], PlayerGroupActive(), 0.5, 0.0);
        gv_instant = false;
    }
    else if (auto8F5BECFB_val == gv_buttonOptionCreep[1]) {
        DialogControlFadeTransparency(gv_buttonOptionCreep[1], PlayerGroupActive(), 0.5, 0.0);
        DialogControlFadeTransparency(gv_buttonOptionCreep[0], PlayerGroupActive(), 0.5, 75.0);
        gf_FastCreepOn();
    }
    else if (auto8F5BECFB_val == gv_buttonOptionCreep[0]) {
        DialogControlFadeTransparency(gv_buttonOptionCreep[1], PlayerGroupActive(), 0.5, 75.0);
        DialogControlFadeTransparency(gv_buttonOptionCreep[0], PlayerGroupActive(), 0.5, 0.0);
        gf_FastCreepOff();
    }
    else if (auto8F5BECFB_val == gv_buttonOptionPanel[1]) {
        DialogControlFadeTransparency(gv_buttonOptionPanel[1], PlayerGroupActive(), 0.5, 0.0);
        DialogControlFadeTransparency(gv_buttonOptionPanel[0], PlayerGroupActive(), 0.5, 75.0);
        gf_Createobserverpanel();
    }
    else if (auto8F5BECFB_val == gv_buttonOptionPanel[0]) {
        DialogControlFadeTransparency(gv_buttonOptionPanel[1], PlayerGroupActive(), 0.5, 75.0);
        DialogControlFadeTransparency(gv_buttonOptionPanel[0], PlayerGroupActive(), 0.5, 0.0);
        DialogDestroy(gv_dialogPanel);
    }
    else {
        gf_AlliancesAction();
    }
}

void gf_AlliancesAction () {
    int autoCEC68366_ae;
    int autoCEC68366_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Implementation
    autoCEC68366_ae = 8;
    autoCEC68366_ai = 1;
    lv_i = 1;
    for ( ; ( (autoCEC68366_ai >= 0 && lv_i <= autoCEC68366_ae) || (autoCEC68366_ai <= 0 && lv_i >= autoCEC68366_ae) ) ; lv_i += autoCEC68366_ai ) {
        if ((EventDialogControl() == gv_checkbox[lv_i]) && (PlayerGetPropertyInt(lv_i, c_playerPropCredits) == 0)) {
            PlayerModifyPropertyInt(lv_i, c_playerPropCredits, c_playerPropOperSetTo, 1);
            DialogControlFadeTransparency(gv_checkbox[lv_i], PlayerGroupActive(), 0.5, 0.0);
            UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (StringExternal("Param/Value/27FFA113") + IntToText(lv_i) + StringExternal("Param/Value/7421775B") + TextWithColor(PlayerName(lv_i), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_i, false))) + StringExternal("Param/Value/76AD1975")));
            return ;
        }
        else if ((EventDialogControl() == gv_checkbox[lv_i]) && (PlayerGetPropertyInt(lv_i, c_playerPropCredits) == 1)) {
            PlayerModifyPropertyInt(lv_i, c_playerPropCredits, c_playerPropOperSetTo, 0);
            DialogControlFadeTransparency(gv_checkbox[lv_i], PlayerGroupActive(), 0.5, 75.0);
            UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (StringExternal("Param/Value/FE67120B") + IntToText(lv_i) + StringExternal("Param/Value/BE5EF7DE") + TextWithColor(PlayerName(lv_i), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_i, false))) + StringExternal("Param/Value/D7388CA9")));
            return ;
        }
        else if ((EventDialogControl() == gv_checkboxRed[lv_i]) && (gv_controlRed[lv_i] == false)) {
            gv_controlRed[lv_i] = true;
            PlayerSetAlliance(9, c_allianceIdControl, lv_i, true);
            PlayerSetAlliance(9, c_allianceIdVision, lv_i, true);
            PlayerSetAlliance(9, c_allianceIdSpend, lv_i, true);
            DialogControlFadeTransparency(gv_checkboxRed[lv_i], PlayerGroupActive(), 0.5, 0.0);
            UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (StringExternal("Param/Value/CC82683D") + IntToText(lv_i) + StringExternal("Param/Value/DE24BFC4") + TextWithColor(PlayerName(lv_i), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_i, false))) + StringExternal("Param/Value/FB03D281")));
            return ;
        }
        else if ((EventDialogControl() == gv_checkboxRed[lv_i]) && (gv_controlRed[lv_i] == true)) {
            gv_controlRed[lv_i] = false;
            PlayerSetAlliance(9, c_allianceIdControl, lv_i, false);
            PlayerSetAlliance(9, c_allianceIdVision, lv_i, false);
            PlayerSetAlliance(9, c_allianceIdSpend, lv_i, false);
            DialogControlFadeTransparency(gv_checkboxRed[lv_i], PlayerGroupActive(), 0.5, 75.0);
            UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (StringExternal("Param/Value/CC011ED6") + IntToText(lv_i) + StringExternal("Param/Value/B349B20D") + TextWithColor(PlayerName(lv_i), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_i, false))) + StringExternal("Param/Value/D9C75727")));
            return ;
        }
        else if ((EventDialogControl() == gv_checkboxBlue[lv_i]) && (gv_controlBlue[lv_i] == false)) {
            gv_controlBlue[lv_i] = true;
            PlayerSetAlliance(10, c_allianceIdControl, lv_i, true);
            PlayerSetAlliance(10, c_allianceIdVision, lv_i, true);
            PlayerSetAlliance(10, c_allianceIdSpend, lv_i, true);
            DialogControlFadeTransparency(gv_checkboxBlue[lv_i], PlayerGroupActive(), 0.5, 0.0);
            UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (StringExternal("Param/Value/12767EEB") + IntToText(lv_i) + StringExternal("Param/Value/DDEF4D90") + TextWithColor(PlayerName(lv_i), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_i, false))) + StringExternal("Param/Value/C447B465")));
            return ;
        }
        else if ((EventDialogControl() == gv_checkboxBlue[lv_i]) && (gv_controlBlue[lv_i] == true)) {
            gv_controlBlue[lv_i] = false;
            PlayerSetAlliance(10, c_allianceIdControl, lv_i, false);
            PlayerSetAlliance(10, c_allianceIdVision, lv_i, false);
            PlayerSetAlliance(10, c_allianceIdSpend, lv_i, false);
            DialogControlFadeTransparency(gv_checkboxBlue[lv_i], PlayerGroupActive(), 0.5, 75.0);
            UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (StringExternal("Param/Value/C37454DE") + IntToText(lv_i) + StringExternal("Param/Value/08CB16AC") + TextWithColor(PlayerName(lv_i), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_i, false))) + StringExternal("Param/Value/BC460BDF")));
            return ;
        }
    }
    TriggerDebugOutput(1, StringExternal("Param/Value/AA608194"), true);
}

trigger auto_gf_FastCreepOn_Trigger = null;

void gf_FastCreepOn () {
    if (auto_gf_FastCreepOn_Trigger == null) {
        auto_gf_FastCreepOn_Trigger = TriggerCreate("auto_gf_FastCreepOn_TriggerFunc");
    }

    TriggerExecute(auto_gf_FastCreepOn_Trigger, false, false);
}

bool auto_gf_FastCreepOn_TriggerFunc (bool testConds, bool runActions) {
    // Implementation
    gv_fastCreep = true;
    CreepSetSpeed(c_creepSpeedGrowth, 1000.0);
    CreepSetSpeed(c_creepSpeedDecay, 1000.0);
    CreepSetSpeed(c_creepSpeedBlend, 1000.0);
    return true;
}

trigger auto_gf_FastCreepOff_Trigger = null;

void gf_FastCreepOff () {
    if (auto_gf_FastCreepOff_Trigger == null) {
        auto_gf_FastCreepOff_Trigger = TriggerCreate("auto_gf_FastCreepOff_TriggerFunc");
    }

    TriggerExecute(auto_gf_FastCreepOff_Trigger, false, false);
}

bool auto_gf_FastCreepOff_TriggerFunc (bool testConds, bool runActions) {
    // Implementation
    gv_fastCreep = false;
    CreepSetSpeed(c_creepSpeedGrowth, 100.0);
    CreepSetSpeed(c_creepSpeedDecay, 100.0);
    CreepSetSpeed(c_creepSpeedBlend, 100.0);
    return true;
}

void gf_ButtonSave (int lp_inputslot) {
    // Implementation
    if ((lp_inputslot == 0)) {
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (StringExternal("Param/Value/D726A95A")));
        gf_HighlightButton(gv_buttonSave[lp_inputslot], true);
        gf_HighlightButton(gv_buttonLoad[lp_inputslot], true);
        Wait(0.1, c_timeGame);
        DialogControlSetEnabled(gv_buttonLoad[lp_inputslot], PlayerGroupActive(), true);
        gf_SaveState(lp_inputslot);
        gf_HideSubmenus();
        Wait(1.0, c_timeGame);
        UIClearMessages(PlayerGroupActive(), c_messageAreaSubtitle);
        return ;
    }
    else {
    }
    if (gf_NoUnitsRed() && gf_NoUnitsBlue()) {
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (StringExternal("Param/Value/5A4862BF") + IntToText(lp_inputslot) + StringExternal("Param/Value/00A2CB4C")));
        gf_HighlightButton(gv_buttonSave[lp_inputslot], false);
        gf_HighlightButton(gv_buttonLoad[lp_inputslot], false);
        Wait(0.1, c_timeGame);
        DialogControlSetEnabled(gv_buttonLoad[lp_inputslot], PlayerGroupActive(), false);
        libNtve_gf_SetDialogItemTooltip(gv_buttonSave[lp_inputslot], StringExternal("Param/Value/C5BD48C9"), PlayerGroupActive());
        libNtve_gf_SetDialogItemTooltip(gv_buttonLoad[lp_inputslot], StringExternal("Param/Value/85669BB5"), PlayerGroupActive());
        gf_ClearState(lp_inputslot);
        gf_HideSubmenus();
        Wait(1.0, c_timeGame);
        UIClearMessages(PlayerGroupActive(), c_messageAreaSubtitle);
    }
    else {
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (StringExternal("Param/Value/35554BE7") + IntToText(lp_inputslot) + StringExternal("Param/Value/FF80A37A")));
        gf_HighlightButton(gv_buttonSave[lp_inputslot], true);
        gf_HighlightButton(gv_buttonLoad[lp_inputslot], true);
        Wait(0.1, c_timeGame);
        DialogControlSetEnabled(gv_buttonLoad[lp_inputslot], PlayerGroupActive(), true);
        libNtve_gf_SetDialogItemTooltip(gv_buttonSave[lp_inputslot], StringExternal("Param/Value/9858CD34"), PlayerGroupActive());
        libNtve_gf_SetDialogItemTooltip(gv_buttonLoad[lp_inputslot], StringExternal("Param/Value/4AB14F67"), PlayerGroupActive());
        gf_SaveState(lp_inputslot);
        gf_SavetoBank(lp_inputslot);
        gf_HideSubmenus();
        DialogSetVisible(gv_dialogFilenameSubmenu, PlayerGroupActive(), true);
        Wait(1.0, c_timeGame);
        UIClearMessages(PlayerGroupActive(), c_messageAreaSubtitle);
    }
}

void gf_SaveState (int lp_inputslot) {
    // Implementation
    gf_SaveTerrain(lp_inputslot);
    gf_SaveUnits(lp_inputslot);
    gf_SaveUpgrades(lp_inputslot);
}

void gf_SaveDescription () {
    // Variable Declarations
    string lv_string;

    // Variable Initialization
    lv_string = "";

    // Implementation
    if ((EventDialogControl() == gv_buttonOK)) {
        lv_string = libNtve_gf_DialogItemEditValue(gv_editBox, EventPlayer());
    }
    else {
    }
    libNtve_gf_SetDialogItemTooltip(gv_buttonSave[gv_iSlot], StringToText(lv_string), PlayerGroupActive());
    libNtve_gf_SetDialogItemTooltip(gv_buttonLoad[gv_iSlot], StringToText(lv_string), PlayerGroupActive());
    gf_HideSubmenus();
    BankLoad("UnitTesterOnline", 1);
    BankValueSetFromString(BankLastCreated(), IntToString(gv_iSlot), "DESCRIPTION", lv_string);
    BankSave(BankLastCreated());
}

trigger auto_gf_SaveTerrain_Trigger = null;
int auto_gf_SaveTerrain_lp_inputslot;

void gf_SaveTerrain (int lp_inputslot) {
    auto_gf_SaveTerrain_lp_inputslot = lp_inputslot;

    if (auto_gf_SaveTerrain_Trigger == null) {
        auto_gf_SaveTerrain_Trigger = TriggerCreate("auto_gf_SaveTerrain_TriggerFunc");
    }

    TriggerExecute(auto_gf_SaveTerrain_Trigger, false, false);
}

bool auto_gf_SaveTerrain_TriggerFunc (bool testConds, bool runActions) {
    int lp_inputslot = auto_gf_SaveTerrain_lp_inputslot;

    // Implementation
    gv_stateTerrain[lp_inputslot] = gv_terrain;
    return true;
}

trigger auto_gf_SaveUnits_Trigger = null;
int auto_gf_SaveUnits_lp_inputslot;

void gf_SaveUnits (int lp_inputslot) {
    auto_gf_SaveUnits_lp_inputslot = lp_inputslot;

    if (auto_gf_SaveUnits_Trigger == null) {
        auto_gf_SaveUnits_Trigger = TriggerCreate("auto_gf_SaveUnits_TriggerFunc");
    }

    TriggerExecute(auto_gf_SaveUnits_Trigger, false, false);
}

bool auto_gf_SaveUnits_TriggerFunc (bool testConds, bool runActions) {
    int lp_inputslot = auto_gf_SaveUnits_lp_inputslot;

    // Variable Declarations
    string lv_string;
    string lv_unittype;
    string lv_owner;
    string lv_x;
    string lv_y;

    // Variable Initialization
    lv_string = "";
    lv_unittype = "";
    lv_owner = "";
    lv_x = "";
    lv_y = "";

    // Implementation
    UnitGroupLoopBegin(UnitGroup(null, 9, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        lv_unittype = (UnitGetType(UnitGroupLoopCurrent()));
        lv_x = FixedToString(PointGetX(UnitGetPosition(UnitGroupLoopCurrent())), c_fixedPrecisionAny);
        lv_y = FixedToString(PointGetY(UnitGetPosition(UnitGroupLoopCurrent())), c_fixedPrecisionAny);
        lv_string = (lv_string + lv_unittype + " " + lv_x + " " + lv_y + " ");
    }
    UnitGroupLoopEnd();
    gv_stateUnits[lp_inputslot][0] = lv_string;
    lv_string = "";
    UnitGroupLoopBegin(UnitGroup(null, 10, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        lv_unittype = (UnitGetType(UnitGroupLoopCurrent()));
        lv_x = FixedToString(PointGetX(UnitGetPosition(UnitGroupLoopCurrent())), c_fixedPrecisionAny);
        lv_y = FixedToString(PointGetY(UnitGetPosition(UnitGroupLoopCurrent())), c_fixedPrecisionAny);
        lv_string = (lv_string + lv_unittype + " " + lv_x + " " + lv_y + " ");
    }
    UnitGroupLoopEnd();
    gv_stateUnits[lp_inputslot][1] = lv_string;
    lv_string = "";
    UnitGroupLoopBegin(UnitGroup(null, 0, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        lv_unittype = (UnitGetType(UnitGroupLoopCurrent()));
        lv_x = FixedToString(PointGetX(UnitGetPosition(UnitGroupLoopCurrent())), c_fixedPrecisionAny);
        lv_y = FixedToString(PointGetY(UnitGetPosition(UnitGroupLoopCurrent())), c_fixedPrecisionAny);
        lv_string = (lv_string + lv_unittype + " " + lv_x + " " + lv_y + " ");
    }
    UnitGroupLoopEnd();
    gv_stateUnits[lp_inputslot][2] = lv_string;
    return true;
}

trigger auto_gf_SaveUpgrades_Trigger = null;
int auto_gf_SaveUpgrades_lp_inputslot;

void gf_SaveUpgrades (int lp_inputslot) {
    auto_gf_SaveUpgrades_lp_inputslot = lp_inputslot;

    if (auto_gf_SaveUpgrades_Trigger == null) {
        auto_gf_SaveUpgrades_Trigger = TriggerCreate("auto_gf_SaveUpgrades_TriggerFunc");
    }

    TriggerExecute(auto_gf_SaveUpgrades_Trigger, false, false);
}

bool auto_gf_SaveUpgrades_TriggerFunc (bool testConds, bool runActions) {
    int lp_inputslot = auto_gf_SaveUpgrades_lp_inputslot;

    int auto23ECFD05_ae;
    int auto23ECFD05_ai;
    int autoC2BC8BCB_ae;
    int autoC2BC8BCB_ai;

    // Variable Declarations
    string lv_string;

    // Variable Initialization
    lv_string = "";

    // Implementation
    auto23ECFD05_ae = 1;
    auto23ECFD05_ai = 1;
    gv_iPlayer = 0;
    for ( ; ( (auto23ECFD05_ai >= 0 && gv_iPlayer <= auto23ECFD05_ae) || (auto23ECFD05_ai <= 0 && gv_iPlayer >= auto23ECFD05_ae) ) ; gv_iPlayer += auto23ECFD05_ai ) {
        autoC2BC8BCB_ae = 99;
        autoC2BC8BCB_ai = 1;
        gv_iUnit = 0;
        for ( ; ( (autoC2BC8BCB_ai >= 0 && gv_iUnit <= autoC2BC8BCB_ae) || (autoC2BC8BCB_ai <= 0 && gv_iUnit >= autoC2BC8BCB_ae) ) ; gv_iUnit += autoC2BC8BCB_ai ) {
            if ((gv_upgradeFlag[gv_iUnit][gv_iPlayer] == true)) {
                lv_string = (lv_string + "1 ");
            }
            else {
                lv_string = (lv_string + "0 ");
            }
        }
    }
    gv_stateUpgrades[lp_inputslot] = lv_string;
    return true;
}

void gf_ButtonLoad () {
    // Implementation
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (StringExternal("Param/Value/0A292254") + IntToText(gv_iSlot) + StringExternal("Param/Value/180F092C")));
    Wait(0.1, c_timeGame);
    gf_InitLeaderboard();
    gf_DeleteAll();
    gf_HideSubmenus();
    gf_LoadState(gv_iSlot);
    UnitControlGroupAddUnits(1, 1, UnitGroup(null, 9, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0));
    UnitControlGroupAddUnits(gv_player2, 2, UnitGroup(null, 10, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0));
    if (gf_CreatorMode()) {
        UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            libNtve_gf_MakeUnitUncommandable(UnitGroupLoopCurrent(), true);
        }
        UnitGroupLoopEnd();
    }
    else {
    }
    Wait(1.0, c_timeGame);
    UIClearMessages(PlayerGroupActive(), c_messageAreaSubtitle);
}

void gf_LoadState (int lp_inputslot) {
    // Implementation
    gf_LoadTerrain(gv_stateTerrain[lp_inputslot]);
    gf_LoadUnits(gv_stateUnits[lp_inputslot][0], 9);
    gf_LoadUnits(gv_stateUnits[lp_inputslot][1], 10);
    gf_LoadUnits(gv_stateUnits[lp_inputslot][2], 0);
    if ((gv_shiftToggle == true)) {
        gf_UpgradeLvlResetAll();
        gf_LoadUpgrades(gv_stateUpgrades[lp_inputslot]);
    }
    else {
    }
}

void gf_LoadTerrain (int lp_inputterrain) {
    // Implementation
    gv_iTerrain = lp_inputterrain;
    if ((gv_iTerrain != gv_terrain) && (gv_iTerrain != 0)) {
        gf_TerrainChanger();
    }
    else {
    }
}

trigger auto_gf_LoadUnits_Trigger = null;
string auto_gf_LoadUnits_lp_inputstring;
int auto_gf_LoadUnits_lp_inputowner;

void gf_LoadUnits (string lp_inputstring, int lp_inputowner) {
    auto_gf_LoadUnits_lp_inputstring = lp_inputstring;
    auto_gf_LoadUnits_lp_inputowner = lp_inputowner;

    if (auto_gf_LoadUnits_Trigger == null) {
        auto_gf_LoadUnits_Trigger = TriggerCreate("auto_gf_LoadUnits_TriggerFunc");
    }

    TriggerExecute(auto_gf_LoadUnits_Trigger, false, false);
}

bool auto_gf_LoadUnits_TriggerFunc (bool testConds, bool runActions) {
    string lp_inputstring = auto_gf_LoadUnits_lp_inputstring;
    int lp_inputowner = auto_gf_LoadUnits_lp_inputowner;

    // Variable Declarations
    string lv_unittype;
    fixed lv_x;
    fixed lv_y;
    int lv_i;

    // Variable Initialization
    lv_i = 1;

    // Implementation
    while ((StringWord(lp_inputstring, lv_i) != null)) {
        lv_unittype = UnitTypeFromString(StringWord(lp_inputstring, lv_i));
        lv_i += 1;
        lv_x = StringToFixed(StringWord(lp_inputstring, lv_i));
        lv_i += 1;
        lv_y = StringToFixed(StringWord(lp_inputstring, lv_i));
        lv_i += 1;
        libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_unittype, 0, lp_inputowner, Point(lv_x, lv_y));
    }
    return true;
}

trigger auto_gf_LoadUpgrades_Trigger = null;
string auto_gf_LoadUpgrades_lp_inputstring;

void gf_LoadUpgrades (string lp_inputstring) {
    auto_gf_LoadUpgrades_lp_inputstring = lp_inputstring;

    if (auto_gf_LoadUpgrades_Trigger == null) {
        auto_gf_LoadUpgrades_Trigger = TriggerCreate("auto_gf_LoadUpgrades_TriggerFunc");
    }

    TriggerExecute(auto_gf_LoadUpgrades_Trigger, false, false);
}

bool auto_gf_LoadUpgrades_TriggerFunc (bool testConds, bool runActions) {
    string lp_inputstring = auto_gf_LoadUpgrades_lp_inputstring;

    int autoB07B3429_ae;
    int autoB07B3429_ai;
    int auto010839D5_ae;
    int auto010839D5_ai;

    // Variable Declarations
    string lv_token;
    int lv_i;

    // Variable Initialization
    lv_token = "";

    // Implementation
    autoB07B3429_ae = 1;
    autoB07B3429_ai = 1;
    gv_iPlayer = 0;
    for ( ; ( (autoB07B3429_ai >= 0 && gv_iPlayer <= autoB07B3429_ae) || (autoB07B3429_ai <= 0 && gv_iPlayer >= autoB07B3429_ae) ) ; gv_iPlayer += autoB07B3429_ai ) {
        auto010839D5_ae = 99;
        auto010839D5_ai = 1;
        gv_iUnit = 0;
        for ( ; ( (auto010839D5_ai >= 0 && gv_iUnit <= auto010839D5_ae) || (auto010839D5_ai <= 0 && gv_iUnit >= auto010839D5_ae) ) ; gv_iUnit += auto010839D5_ai ) {
            lv_i += 1;
            lv_token = StringWord(lp_inputstring, lv_i);
            if ((gv_upgradeLevel[gv_iUnit] == 0) && (lv_token == "0")) {
                gf_UpgradesOff();
            }
            else if ((gv_upgradeLevel[gv_iUnit] == 0) && (lv_token == "1")) {
                gf_UpgradesOn();
            }
            else if ((gv_upgradeLevel[gv_iUnit] == 1) && (lv_token == "1")) {
                gf_UpgradeLvlShowNext();
                gf_UpgradesOn();
            }
            else if ((gv_upgradeLevel[gv_iUnit] == 2) && (lv_token == "1")) {
                gf_UpgradeLvlShowNext();
                gf_UpgradesOn();
            }
            else if ((gv_upgradeLevel[gv_iUnit] == 3) && (lv_token == "1")) {
                gf_UpgradesOn();
            }
        }
    }
    return true;
}

trigger auto_gf_SavetoBank_Trigger = null;
int auto_gf_SavetoBank_lp_inputslot;

void gf_SavetoBank (int lp_inputslot) {
    auto_gf_SavetoBank_lp_inputslot = lp_inputslot;

    if (auto_gf_SavetoBank_Trigger == null) {
        auto_gf_SavetoBank_Trigger = TriggerCreate("auto_gf_SavetoBank_TriggerFunc");
    }

    TriggerExecute(auto_gf_SavetoBank_Trigger, false, false);
}

bool auto_gf_SavetoBank_TriggerFunc (bool testConds, bool runActions) {
    int lp_inputslot = auto_gf_SavetoBank_lp_inputslot;

    // Variable Declarations
    int lv_ikey;
    int lv_start;
    int lv_end;
    string lv_string;

    // Variable Initialization
    lv_string = "";

    // Implementation
    BankLoad("UnitTesterOnline", 1);
    BankSectionRemove(BankLastCreated(), IntToString(lp_inputslot));
    BankValueSetFromInt(BankLastCreated(), IntToString(lp_inputslot), "TERRAIN", gv_stateTerrain[lp_inputslot]);
    gf_StoreStringLong(gv_stateUnits[lp_inputslot][0], "UNITS R", IntToString(lp_inputslot), BankLastCreated());
    gf_StoreStringLong(gv_stateUnits[lp_inputslot][1], "UNITS B", IntToString(lp_inputslot), BankLastCreated());
    gf_StoreStringLong(gv_stateUnits[lp_inputslot][2], "UNITS N", IntToString(lp_inputslot), BankLastCreated());
    BankValueSetFromString(BankLastCreated(), IntToString(lp_inputslot), "UPGRADES", gv_stateUpgrades[lp_inputslot]);
    BankSave(BankLastCreated());
    return true;
}

void gf_InitializeBank () {
    int auto7868A46F_ae;
    int auto7868A46F_ai;

    // Variable Declarations
    string lv_string;
    int lv_islot;
    int lv_ikey;
    int lv_iplayer;

    // Variable Initialization
    lv_string = "";
    lv_ikey = 1;

    // Implementation
    BankLoad("UnitTesterOnline", 1);
    auto7868A46F_ae = 9;
    auto7868A46F_ai = 1;
    lv_islot = 1;
    for ( ; ( (auto7868A46F_ai >= 0 && lv_islot <= auto7868A46F_ae) || (auto7868A46F_ai <= 0 && lv_islot >= auto7868A46F_ae) ) ; lv_islot += auto7868A46F_ai ) {
        if ((BankSectionExists(BankLastCreated(), IntToString(lv_islot)) == true)) {
            gv_stateTerrain[lv_islot] = BankValueGetAsInt(BankLastCreated(), IntToString(lv_islot), "TERRAIN");
            gv_stateUnits[lv_islot][0] = gf_LoadStringLong("UNITS R", IntToString(lv_islot), BankLastCreated());
            gv_stateUnits[lv_islot][1] = gf_LoadStringLong("UNITS B", IntToString(lv_islot), BankLastCreated());
            gv_stateUnits[lv_islot][2] = gf_LoadStringLong("UNITS N", IntToString(lv_islot), BankLastCreated());
            gv_stateUpgrades[lv_islot] = BankValueGetAsString(BankLastCreated(), IntToString(lv_islot), "UPGRADES");
            libNtve_gf_SetDialogItemTooltip(gv_buttonSave[lv_islot], StringToText(BankValueGetAsString(BankLastCreated(), IntToString(lv_islot), "DESCRIPTION")), PlayerGroupActive());
            libNtve_gf_SetDialogItemTooltip(gv_buttonLoad[lv_islot], StringToText(BankValueGetAsString(BankLastCreated(), IntToString(lv_islot), "DESCRIPTION")), PlayerGroupActive());
            DialogControlSetEnabled(gv_buttonLoad[lv_islot], PlayerGroupActive(), true);
            gf_HighlightButton(gv_buttonLoad[lv_islot], true);
            gf_HighlightButton(gv_buttonSave[lv_islot], true);
        }
        else {
        }
    }
}

trigger auto_gf_StoreStringLong_Trigger = null;
string auto_gf_StoreStringLong_lp_inputString;
string auto_gf_StoreStringLong_lp_inputKey;
string auto_gf_StoreStringLong_lp_inputSection;
bank auto_gf_StoreStringLong_lp_inputBank;

void gf_StoreStringLong (string lp_inputString, string lp_inputKey, string lp_inputSection, bank lp_inputBank) {
    auto_gf_StoreStringLong_lp_inputString = lp_inputString;
    auto_gf_StoreStringLong_lp_inputKey = lp_inputKey;
    auto_gf_StoreStringLong_lp_inputSection = lp_inputSection;
    auto_gf_StoreStringLong_lp_inputBank = lp_inputBank;

    if (auto_gf_StoreStringLong_Trigger == null) {
        auto_gf_StoreStringLong_Trigger = TriggerCreate("auto_gf_StoreStringLong_TriggerFunc");
    }

    TriggerExecute(auto_gf_StoreStringLong_Trigger, false, false);
}

bool auto_gf_StoreStringLong_TriggerFunc (bool testConds, bool runActions) {
    string lp_inputString = auto_gf_StoreStringLong_lp_inputString;
    string lp_inputKey = auto_gf_StoreStringLong_lp_inputKey;
    string lp_inputSection = auto_gf_StoreStringLong_lp_inputSection;
    bank lp_inputBank = auto_gf_StoreStringLong_lp_inputBank;

    // Variable Declarations
    int lv_i;
    int lv_start;
    int lv_end;
    string lv_string;

    // Variable Initialization
    lv_start = 1;
    lv_end = 781;
    lv_string = "";

    // Implementation
    lv_string = StringSub(lp_inputString, lv_start, lv_end);
    while ((lv_string != null)) {
        BankValueSetFromString(lp_inputBank, lp_inputSection, (lp_inputKey + IntToString(lv_i)), lv_string);
        lv_i += 1;
        lv_start += 781;
        lv_end += 781;
        lv_string = StringSub(lp_inputString, lv_start, lv_end);
    }
    return true;
}

string gf_LoadStringLong (string lp_inputKey, string lp_inputSection, bank lp_inputBank) {
    // Variable Declarations
    int lv_i;
    string lv_string;

    // Variable Initialization
    lv_string = "";

    // Implementation
    while ((BankKeyExists(lp_inputBank, lp_inputSection, (lp_inputKey + IntToString(lv_i))) == true)) {
        lv_string = (lv_string + BankValueGetAsString(lp_inputBank, lp_inputSection, (lp_inputKey + IntToString(lv_i))));
        lv_i += 1;
    }
    return lv_string;
}

void gf_ClearState (int lp_inputslot) {
    // Implementation
    gv_stateTerrain[lp_inputslot] = 0;
    gv_stateUnits[lp_inputslot][0] = "";
    gv_stateUnits[lp_inputslot][1] = "";
    gv_stateUpgrades[lp_inputslot] = "";
    BankLoad("UnitTesterOnline", 1);
    BankSectionRemove(BankLastCreated(), IntToString(lp_inputslot));
    BankSave(BankLastCreated());
}

trigger auto_gf_RemoveNeutralStructures_Trigger = null;

void gf_RemoveNeutralStructures () {
    if (auto_gf_RemoveNeutralStructures_Trigger == null) {
        auto_gf_RemoveNeutralStructures_Trigger = TriggerCreate("auto_gf_RemoveNeutralStructures_TriggerFunc");
    }

    TriggerExecute(auto_gf_RemoveNeutralStructures_Trigger, false, false);
}

bool auto_gf_RemoveNeutralStructures_TriggerFunc (bool testConds, bool runActions) {
    // Implementation
    UnitGroupLoopBegin(UnitGroup(null, 0, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    return true;
}

trigger auto_gf_SaveMapStructures_Trigger = null;

void gf_SaveMapStructures () {
    if (auto_gf_SaveMapStructures_Trigger == null) {
        auto_gf_SaveMapStructures_Trigger = TriggerCreate("auto_gf_SaveMapStructures_TriggerFunc");
    }

    TriggerExecute(auto_gf_SaveMapStructures_Trigger, false, false);
}

bool auto_gf_SaveMapStructures_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_string;
    string lv_unittype;
    string lv_owner;
    string lv_x;
    string lv_y;

    // Variable Initialization
    lv_string = "";
    lv_unittype = "";
    lv_owner = "";
    lv_x = "";
    lv_y = "";

    // Implementation
    UnitGroupLoopBegin(UnitGroup(null, 0, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        lv_unittype = (UnitGetType(UnitGroupLoopCurrent()));
        lv_x = FixedToString(PointGetX(UnitGetPosition(UnitGroupLoopCurrent())), c_fixedPrecisionAny);
        lv_y = FixedToString(PointGetY(UnitGetPosition(UnitGroupLoopCurrent())), c_fixedPrecisionAny);
        lv_string = (lv_string + lv_unittype + " " + lv_x + " " + lv_y + " ");
    }
    UnitGroupLoopEnd();
    gv_mapstructures = lv_string;
    return true;
}

void gf_RestoreMapStructures () {
    // Implementation
    gf_RemoveNeutralStructures();
    gf_LoadUnits(gv_mapstructures, 0);
}

void gf_TerrainChanger () {
    // Variable Declarations
    int lv_newterrain;

    // Variable Initialization
    lv_newterrain = gv_iTerrain;

    // Implementation
    if (gf_AttackMode()) {
        gf_ResetUnits();
        gv_iTerrain = lv_newterrain;
    }
    else {
        TriggerEnable(gt_UnitCreated, false);
    }
    DialogControlSetEnabled(gv_buttonTerrain[gv_terrain], PlayerGroupActive(), true);
    DialogControlSetEnabled(gv_buttonTerrain[gv_iTerrain], PlayerGroupActive(), false);
    gv_terrain = gv_iTerrain;
    gv_cameraBounds = gv_regionArray[gv_iTerrain];
    PointSet(PointFromId(106), gv_pointArray[gv_terrain][0]);
    PointSet(PointFromId(107), gv_pointArray[gv_terrain][1]);
    PointSet(PointFromId(109), libNtve_gf_PointOffsetTowardsPoint(gv_pointArray[gv_terrain][0], (DistanceBetweenPoints(gv_pointArray[gv_terrain][0], gv_pointArray[gv_terrain][1]) * 0.5), gv_pointArray[gv_terrain][1]));
    PointSet(PointFromId(108), gv_pointArray[gv_iTerrain][2]);
    CameraSetBounds(PlayerGroupActive(), gv_cameraBounds, true);
    gf_HideSubmenus();
    gf_MoveCameras();
    gf_Revealers();
    PointSet(PointFromId(116), PointWithOffset(PointFromId(108), -1.0, 1.5));
    PointSet(PointFromId(117), PointWithOffset(PointFromId(108), -1.0, 0.0));
    PointSet(PointFromId(118), PointWithOffset(PointFromId(108), -1.0, -1.5));
    PointSet(PointFromId(119), PointWithOffset(PointFromId(108), 1.0, 1.5));
    PointSet(PointFromId(120), PointWithOffset(PointFromId(108), 1.0, 0.0));
    PointSet(PointFromId(121), PointWithOffset(PointFromId(108), 1.0, -1.5));
    UnitSetPosition(UnitFromId(110), PointFromId(116), false);
    UnitSetPosition(UnitFromId(113), PointFromId(119), false);
    UnitSetPosition(UnitFromId(111), PointFromId(117), false);
    UnitSetPosition(UnitFromId(114), PointFromId(120), false);
    UnitSetPosition(gv_zergBuilderRed, PointFromId(118), false);
    UnitSetPosition(gv_zergBuilderBlue, PointFromId(121), false);
    gf_RemoveNeutralStructures();
    gf_RestoreMapStructures();
    UnitGroupLoopBegin(UnitGroup(null, 9, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, UnitGetType(UnitGroupLoopCurrent()), 0, 9, PointFromId(106));
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, 10, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, UnitGetType(UnitGroupLoopCurrent()), 0, 10, PointFromId(107));
    }
    UnitGroupLoopEnd();
    if (gf_AttackMode()) {
        gf_SaveState(0);
    }
    else {
        UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            libNtve_gf_MakeUnitUncommandable(UnitGroupLoopCurrent(), true);
        }
        UnitGroupLoopEnd();
        Wait(0.1, c_timeGame);
        TriggerEnable(gt_UnitCreated, true);
    }
}

void gf_UpgradesOn () {
    // Implementation
    gv_upgradeFlag[gv_iUnit][gv_iPlayer] = true;
    libNtve_gf_SetUpgradeLevelForPlayer(gf_convertiplayertocomputer(), gv_upgradeLink[gv_iUnit], 1);
    DialogControlSetEnabled(gv_buttonUpgradeImage[gv_iUnit][gv_iPlayer], PlayerGroupActive(), false);
}

void gf_UpgradesOff () {
    // Implementation
    gv_upgradeFlag[gv_iUnit][gv_iPlayer] = false;
    libNtve_gf_SetUpgradeLevelForPlayer(gf_convertiplayertocomputer(), gv_upgradeLink[gv_iUnit], 0);
    DialogControlSetEnabled(gv_buttonUpgradeImage[gv_iUnit][gv_iPlayer], PlayerGroupActive(), true);
}

void gf_UpgradeLvl () {
    int autoD1AE7B46_ae;
    int autoD1AE7B46_ai;
    int auto2F6F7B8C_ae;
    int auto2F6F7B8C_ai;

    // Implementation
    autoD1AE7B46_ae = 1;
    autoD1AE7B46_ai = 1;
    gv_iPlayer = 0;
    for ( ; ( (autoD1AE7B46_ai >= 0 && gv_iPlayer <= autoD1AE7B46_ae) || (autoD1AE7B46_ai <= 0 && gv_iPlayer >= autoD1AE7B46_ae) ) ; gv_iPlayer += autoD1AE7B46_ai ) {
        auto2F6F7B8C_ae = 89;
        auto2F6F7B8C_ai = 1;
        gv_iUnit = 0;
        for ( ; ( (auto2F6F7B8C_ai >= 0 && gv_iUnit <= auto2F6F7B8C_ae) || (auto2F6F7B8C_ai <= 0 && gv_iUnit >= auto2F6F7B8C_ae) ) ; gv_iUnit += auto2F6F7B8C_ai ) {
            if ((gv_allUpgrades >= 1) && (gv_upgradeLevel[gv_iUnit] == 1)) {
                gf_UpgradesOn();
                gf_UpgradeLvlShowNext();
            }
            else {
            }
            if ((gv_allUpgrades >= 2) && (gv_upgradeLevel[gv_iUnit] == 2)) {
                gf_UpgradesOn();
                gf_UpgradeLvlShowNext();
            }
            else {
            }
            if ((gv_allUpgrades >= 3) && (gv_upgradeLevel[gv_iUnit] == 3)) {
                gf_UpgradesOn();
            }
            else {
            }
        }
    }
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (StringExternal("Param/Value/F24EFF18") + IntToText(gv_allUpgrades) + StringExternal("Param/Value/10AE1931")));
}

void gf_UpgradeLvlShowNext () {
    // Implementation
    if ((gv_upgradeLevel[gv_iUnit] == 3)) {
        DialogControlSetVisible(gv_buttonUpgrade[gv_iUnit][gv_iPlayer], PlayerGroupActive(), false);
        DialogControlSetVisible(gv_buttonUpgradeImage[gv_iUnit][gv_iPlayer], PlayerGroupActive(), false);
        DialogControlSetVisible(gv_buttonUpgrade[(gv_iUnit - 2)][gv_iPlayer], PlayerGroupActive(), true);
        DialogControlSetVisible(gv_buttonUpgradeImage[(gv_iUnit - 2)][gv_iPlayer], PlayerGroupActive(), true);
    }
    else {
        DialogControlSetVisible(gv_buttonUpgrade[gv_iUnit][gv_iPlayer], PlayerGroupActive(), false);
        DialogControlSetVisible(gv_buttonUpgradeImage[gv_iUnit][gv_iPlayer], PlayerGroupActive(), false);
        DialogControlSetVisible(gv_buttonUpgrade[(gv_iUnit + 1)][gv_iPlayer], PlayerGroupActive(), true);
        DialogControlSetVisible(gv_buttonUpgradeImage[(gv_iUnit + 1)][gv_iPlayer], PlayerGroupActive(), true);
    }
}

void gf_UpgradeLvlReset () {
    // Implementation
    gv_upgradeFlag[gv_iUnit][gv_iPlayer] = false;
    gv_upgradeFlag[(gv_iUnit - 1)][gv_iPlayer] = false;
    gv_upgradeFlag[(gv_iUnit - 2)][gv_iPlayer] = false;
    DialogControlSetEnabled(gv_buttonUpgradeImage[gv_iUnit][gv_iPlayer], PlayerGroupActive(), true);
    DialogControlSetEnabled(gv_buttonUpgradeImage[(gv_iUnit - 1)][gv_iPlayer], PlayerGroupActive(), true);
    DialogControlSetEnabled(gv_buttonUpgradeImage[(gv_iUnit - 2)][gv_iPlayer], PlayerGroupActive(), true);
    libNtve_gf_SetUpgradeLevelForPlayer(gf_convertiplayertocomputer(), gv_upgradeLink[gv_iUnit], 0);
    libNtve_gf_SetUpgradeLevelForPlayer(gf_convertiplayertocomputer(), gv_upgradeLink[(gv_iUnit - 1)], 0);
    libNtve_gf_SetUpgradeLevelForPlayer(gf_convertiplayertocomputer(), gv_upgradeLink[(gv_iUnit - 2)], 0);
}

void gf_UpgradeLvlResetAll () {
    int autoE38B9C87_ae;
    int autoE38B9C87_ai;
    int auto1D7F3C3C_ae;
    int auto1D7F3C3C_ai;

    // Implementation
    autoE38B9C87_ae = 1;
    autoE38B9C87_ai = 1;
    gv_iPlayer = 0;
    for ( ; ( (autoE38B9C87_ai >= 0 && gv_iPlayer <= autoE38B9C87_ae) || (autoE38B9C87_ai <= 0 && gv_iPlayer >= autoE38B9C87_ae) ) ; gv_iPlayer += autoE38B9C87_ai ) {
        auto1D7F3C3C_ae = 99;
        auto1D7F3C3C_ai = 1;
        gv_iUnit = 0;
        for ( ; ( (auto1D7F3C3C_ai >= 0 && gv_iUnit <= auto1D7F3C3C_ae) || (auto1D7F3C3C_ai <= 0 && gv_iUnit >= auto1D7F3C3C_ae) ) ; gv_iUnit += auto1D7F3C3C_ai ) {
            if ((gv_upgradeLevel[gv_iUnit] == 1)) {
                gf_UpgradesOn();
                gf_UpgradeLvlShowNext();
            }
            else {
            }
            if ((gv_upgradeLevel[gv_iUnit] == 2)) {
                gf_UpgradesOn();
                gf_UpgradeLvlShowNext();
            }
            else {
            }
            if ((gv_upgradeLevel[gv_iUnit] == 3)) {
                gf_UpgradesOn();
                gf_UpgradeLvlReset();
                gf_UpgradeLvlShowNext();
            }
            else {
            }
        }
    }
}

void gf_AllAbilitiesOn () {
    int auto1430CED6_ae;
    int auto1430CED6_ai;
    int autoB05AAF7E_ae;
    int autoB05AAF7E_ai;

    // Implementation
    gv_allAbilities = 1;
    auto1430CED6_ae = 1;
    auto1430CED6_ai = 1;
    gv_iPlayer = 0;
    for ( ; ( (auto1430CED6_ai >= 0 && gv_iPlayer <= auto1430CED6_ae) || (auto1430CED6_ai <= 0 && gv_iPlayer >= auto1430CED6_ae) ) ; gv_iPlayer += auto1430CED6_ai ) {
        autoB05AAF7E_ae = 99;
        autoB05AAF7E_ai = 1;
        gv_iUnit = 0;
        for ( ; ( (autoB05AAF7E_ai >= 0 && gv_iUnit <= autoB05AAF7E_ae) || (autoB05AAF7E_ai <= 0 && gv_iUnit >= autoB05AAF7E_ae) ) ; gv_iUnit += autoB05AAF7E_ai ) {
            if ((gv_upgradeLevel[gv_iUnit] == 0)) {
                gf_UpgradesOn();
            }
            else {
            }
        }
    }
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, StringExternal("Param/Value/7A263E5C"));
}

void gf_AllAbilitiesOff () {
    int auto630D5CC9_ae;
    int auto630D5CC9_ai;
    int auto4B18015D_ae;
    int auto4B18015D_ai;

    // Implementation
    gv_allAbilities = 0;
    auto630D5CC9_ae = 1;
    auto630D5CC9_ai = 1;
    gv_iPlayer = 0;
    for ( ; ( (auto630D5CC9_ai >= 0 && gv_iPlayer <= auto630D5CC9_ae) || (auto630D5CC9_ai <= 0 && gv_iPlayer >= auto630D5CC9_ae) ) ; gv_iPlayer += auto630D5CC9_ai ) {
        auto4B18015D_ae = 99;
        auto4B18015D_ai = 1;
        gv_iUnit = 0;
        for ( ; ( (auto4B18015D_ai >= 0 && gv_iUnit <= auto4B18015D_ae) || (auto4B18015D_ai <= 0 && gv_iUnit >= auto4B18015D_ae) ) ; gv_iUnit += auto4B18015D_ai ) {
            if ((gv_upgradeLevel[gv_iUnit] == 0)) {
                gf_UpgradesOff();
            }
            else {
            }
        }
    }
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, StringExternal("Param/Value/FA7F6350"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Map
//--------------------------------------------------------------------------------------------------
bool gt_InitializeMap_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    GameSetSpeedValue(c_gameSpeedFaster);
    PlayerSetColorIndex(9, 1, true);
    PlayerSetColorIndex(10, 2, true);
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, StringExternal("Param/Value/2CF9EDBA"));
    UISetFrameVisible(PlayerGroupActive(), c_syncFrameTypeErrorDisplayPanel, false);
    UISetFrameVisible(PlayerGroupActive(), c_syncFrameTypeResourcePanel, false);
    UISetFrameVisible(PlayerGroupActive(), c_syncFrameTypeSupply, false);
    UISetFrameVisible(PlayerGroupActive(), c_syncFrameTypeAllianceButton, false);
    UISetFrameVisible(PlayerGroupActive(), c_syncFrameTypeTeamResourceButton, false);
    CreepModify(PointFromId(105), 16.0, false, false);
    gf_FastCreepOn();
    gf_InitLeaderboard();
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, 0, 0), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        SoundStopAllModelSounds();
        libNtve_gf_ShareVisionofUnit(UnitGroupLoopCurrent(), true, 1);
        libNtve_gf_ShareVisionofUnit(UnitGroupLoopCurrent(), true, 2);
        UnitBehaviorRemove(UnitGroupLoopCurrent(), "ZergBuildingNotOnCreep", 1);
        libNtve_gf_MakeUnitInvulnerable(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    UnitMagazineArm(UnitFromId(68), AbilityCommand("ArmSiloWithNuke", 0), 10);
    UnitMagazineArm(UnitFromId(67), AbilityCommand("ArmSiloWithNuke", 0), 10);
    libNtve_gf_SetAlliance(9, 10, 7);
    PlayerGroupLoopBegin(PlayerGroupAll());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropMinerals, c_playerPropOperSetTo, 99999);
        PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropVespene, c_playerPropOperSetTo, 99999);
        PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropSuppliesLimit, c_playerPropOperSetTo, 1000);
    }
    PlayerGroupLoopEnd();
    if ((PlayerType(2) == c_playerTypeUser)) {
        gv_player2 = 2;
        PlayerModifyPropertyInt(1, c_playerPropCredits, c_playerPropOperSetTo, 1);
        PlayerModifyPropertyInt(2, c_playerPropCredits, c_playerPropOperSetTo, 1);
        gv_controlRed[1] = true;
        PlayerSetAlliance(9, c_allianceIdVision, 1, true);
        PlayerSetAlliance(9, c_allianceIdControl, 1, true);
        PlayerSetAlliance(9, c_allianceIdSpend, 1, true);
        gv_controlBlue[2] = true;
        PlayerSetAlliance(10, c_allianceIdVision, 2, true);
        PlayerSetAlliance(10, c_allianceIdControl, 2, true);
        PlayerSetAlliance(10, c_allianceIdSpend, 2, true);
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, StringExternal("Param/Value/1E69A04A"));
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (TextWithColor(PlayerName(1), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(1, false))) + StringExternal("Param/Value/63364F79")));
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (TextWithColor(PlayerName(2), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(2, false))) + StringExternal("Param/Value/A21F26AB")));
    }
    else {
        gv_player2 = 1;
        gv_controlRed[1] = true;
        gv_controlBlue[1] = true;
        PlayerModifyPropertyInt(1, c_playerPropCredits, c_playerPropOperSetTo, 1);
        PlayerSetAlliance(9, c_allianceIdVision, 1, true);
        PlayerSetAlliance(9, c_allianceIdControl, 1, true);
        PlayerSetAlliance(9, c_allianceIdSpend, 1, true);
        PlayerSetAlliance(10, c_allianceIdVision, 1, true);
        PlayerSetAlliance(10, c_allianceIdControl, 1, true);
        PlayerSetAlliance(10, c_allianceIdSpend, 1, true);
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, StringExternal("Param/Value/FF76445C"));
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (TextWithColor(PlayerName(1), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(1, false))) + StringExternal("Param/Value/1EE68A8E")));
    }
    HelpPanelAddTip(PlayerGroupActive(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/A0E968B7"), 0), StringExternal("Param/Value/AB592F06"), StringExternal("Param/Value/608B77BA"), "Assets\\Textures\\btn-tips-computerterminals.dds");
    HelpPanelAddTip(PlayerGroupActive(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/71304DB0"), 0), StringExternal("Param/Value/8505CDAE"), StringExternal("Param/Value/F44778EB"), "Assets\\Textures\\btn-tips-laserdrillantiair.dds");
    HelpPanelAddTip(PlayerGroupActive(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/FB563591"), 0), StringExternal("Param/Value/2EE0B551"), StringExternal("Param/Value/7609EB00"), "Assets\\Textures\\btn-tips-hacking.dds");
    HelpPanelAddTip(PlayerGroupActive(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/163ED7F0"), 0), StringExternal("Param/Value/BB1A9EDE"), StringExternal("Param/Value/340D9F15"), "Assets\\Textures\\btn-tips-missioncase.dds");
    HelpPanelAddTip(PlayerGroupActive(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/DC8D7B25"), 0), StringExternal("Param/Value/E36ADE65"), StringExternal("Param/Value/8BB03241"), "Assets\\Textures\\btn-tips-starmap.dds");
    HelpPanelAddTip(PlayerGroupActive(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/360D5A78"), 0), StringExternal("Param/Value/AFED49D2"), StringExternal("Param/Value/5F7EF792"), "Assets\\Textures\\btn-building-terran-bunker.dds");
    HelpPanelAddTip(PlayerGroupActive(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/84753A09"), 0), StringExternal("Param/Value/835495DE"), StringExternal("Param/Value/E2C6AD8A"), "Assets\\Textures\\btn-upgrade-terran-infantryweaponslevel2.dds");
    HelpPanelAddTip(PlayerGroupActive(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/6A22DC1A"), 0), StringExternal("Param/Value/BC265421"), StringExternal("Param/Value/BB04D88D"), "Assets\\Textures\\btn-unit-terran-marine.dds");
    TipAlertPanelClear(PlayerGroupActive());
    HelpPanelAddTip(PlayerGroupActive(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/54C226D2"), 0), StringExternal("Param/Value/FE21CB81"), StringExternal("Param/Value/022F233B"), "Assets\\Textures\\btn-tips-tutorial.dds");
    TimerStart(gv_timer, c_timerDurationInfinite, false, c_timeReal);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaWarning, StringExternal("Param/Value/0AE31C3A"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitializeMap_Init () {
    gt_InitializeMap = TriggerCreate("gt_InitializeMap_Func");
    TriggerAddEventMapInit(gt_InitializeMap);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Data
//--------------------------------------------------------------------------------------------------
bool gt_InitializeData_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_DatabaseUnits();
    gf_DatabaseResearch();
    gf_CreateDialogs();
    gf_DatabaseTerrain();
    gf_SaveMapStructures();
    gf_TerrainChanger();
    gf_InitializeBank();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitializeData_Init () {
    gt_InitializeData = TriggerCreate("gt_InitializeData_Func");
    TriggerAddEventMapInit(gt_InitializeData);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Back
//--------------------------------------------------------------------------------------------------
bool gt_Back_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(gf_PlayerhasPermission())) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, StringExternal("Param/Value/1E4DD607"));
    DialogControlSetEnabled(gv_buttonBack, PlayerGroupActive(), false);
    Wait(0.1, c_timeGame);
    TimerWindowDestroy(gv_timerWindow);
    gf_HideAllDialogs();
    gf_ShowAllDialogs();
    gf_ResetUnits();
    libNtve_gf_SetAlliance(9, 10, 7);
    PlayerGroupLoopBegin(PlayerGroupActive());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        UnitGroupSelect(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0), PlayerGroupLoopCurrent(), false);
    }
    PlayerGroupLoopEnd();
    gf_MoveCameras();
    BoardMinimizeSetState(gv_leaderboard, PlayerGroupActive(), false);
    Wait(0.1, c_timeGame);
    TriggerEnable(gt_Update, false);
    TriggerEnable(gt_UnitCreated, true);
    TriggerEnable(gt_UnitDies, true);
    Wait(1.0, c_timeGame);
    DialogControlSetEnabled(gv_buttonBack, PlayerGroupActive(), true);
    UIClearMessages(PlayerGroupActive(), c_messageAreaSubtitle);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Back_Init () {
    gt_Back = TriggerCreate("gt_Back_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start
//--------------------------------------------------------------------------------------------------
bool gt_Start_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(gf_CreatorMode())) {
            return false;
        }

        if (!(gf_PlayerhasPermission())) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, StringExternal("Param/Value/299C030A"));
    DialogControlSetEnabled(gv_buttonStart, PlayerGroupActive(), false);
    Wait(0.1, c_timeGame);
    gf_SaveState(0);
    TriggerEnable(gt_UnitCreated, false);
    TriggerEnable(gt_UnitDies, false);
    gf_HideAllDialogs();
    BoardMinimizeSetState(gv_leaderboard, PlayerGroupActive(), true);
    DialogSetVisible(gv_dialogAttack, PlayerGroupActive(), true);
    libNtve_gf_SetAlliance(9, 10, 5);
    PlayerGroupLoopBegin(PlayerGroupActive());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        UnitGroupSelect(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0), PlayerGroupLoopCurrent(), false);
    }
    PlayerGroupLoopEnd();
    gf_ResetUnits();
    TimerRestart(gv_timer);
    TimerWindowCreate(gv_timer, StringExternal("Param/Value/1DF40005"), true, true);
    gv_timerWindow = TimerWindowLastCreated();
    if ((!(gf_NoUnitsRed() || gf_NoUnitsBlue()))) {
        TriggerEnable(gt_Update, true);
    }
    else {
    }
    Wait(1.0, c_timeGame);
    DialogControlSetEnabled(gv_buttonRedo, PlayerGroupActive(), true);
    DialogControlSetEnabled(gv_buttonLoad[0], PlayerGroupActive(), true);
    gf_HighlightButton(gv_buttonSave[0], true);
    gf_HighlightButton(gv_buttonLoad[0], true);
    DialogControlSetEnabled(gv_buttonStart, PlayerGroupActive(), true);
    UIClearMessages(PlayerGroupActive(), c_messageAreaSubtitle);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Start_Init () {
    gt_Start = TriggerCreate("gt_Start_Func");
    TriggerAddEventKeyPressed(gt_Start, c_playerAny, c_keySpace, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pause
//--------------------------------------------------------------------------------------------------
bool gt_Pause_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(gf_AttackMode())) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_pause == false)) {
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaDirective, StringExternal("Param/Value/3C205BF3"));
        UnitPauseAll(true);
        gv_pause = true;
        gf_HighlightButton(gv_buttonPause, true);
        TriggerStop(gt_Pause);
    }
    else {
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaDirective, StringExternal("Param/Value/C495EE40"));
        UnitPauseAll(false);
        gv_pause = false;
        gf_HighlightButton(gv_buttonPause, false);
        Wait(2.0, c_timeReal);
        UIClearMessages(PlayerGroupActive(), c_messageAreaDirective);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Pause_Init () {
    gt_Pause = TriggerCreate("gt_Pause_Func");
    TriggerAddEventKeyPressed(gt_Pause, c_playerAny, c_keyMinus, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(gt_Pause, c_playerAny, c_keyNumPadMinus, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Energy
//--------------------------------------------------------------------------------------------------
bool gt_Energy_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(gf_AttackMode())) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, StringExternal("Param/Value/38B56937"));
    DialogControlSetEnabled(gv_buttonEnergy, PlayerGroupActive(), false);
    Wait(0.1, c_timeGame);
    gf_Energy();
    Wait(1.0, c_timeGame);
    DialogControlSetEnabled(gv_buttonEnergy, PlayerGroupActive(), true);
    UIClearMessages(PlayerGroupActive(), c_messageAreaSubtitle);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Energy_Init () {
    gt_Energy = TriggerCreate("gt_Energy_Func");
    TriggerAddEventKeyPressed(gt_Energy, c_playerAny, c_keyComma, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Respawn
//--------------------------------------------------------------------------------------------------
bool gt_Respawn_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(gf_AttackMode())) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, StringExternal("Param/Value/E290031F"));
    DialogControlSetEnabled(gv_buttonRespawn, PlayerGroupActive(), false);
    Wait(0.1, c_timeGame);
    gf_ResetUnits();
    if ((!(gf_NoUnitsRed() || gf_NoUnitsBlue()))) {
        TriggerEnable(gt_Update, true);
    }
    else {
    }
    Wait(1.0, c_timeGame);
    DialogControlSetEnabled(gv_buttonRespawn, PlayerGroupActive(), true);
    UIClearMessages(PlayerGroupActive(), c_messageAreaSubtitle);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Respawn_Init () {
    gt_Respawn = TriggerCreate("gt_Respawn_Func");
    TriggerAddEventKeyPressed(gt_Respawn, c_playerAny, c_keyEquals, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(gt_Respawn, c_playerAny, c_keyNumPadPlus, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Update
//--------------------------------------------------------------------------------------------------
bool gt_Update_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int[2] lv_unitcount;
    int lv_mineralscount;
    int lv_vespenecount;
    int lv_supplycount;
    int lv_winningplayer;
    text lv_winningtext;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gf_NoUnitsRed() || gf_NoUnitsBlue()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_Update, false);
    Wait(1.0, c_timeGame);
    lv_unitcount[0] = UnitGroupCount(UnitGroup(null, 9, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), c_unitCountAlive);
    lv_unitcount[1] = UnitGroupCount(UnitGroup(null, 10, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), c_unitCountAlive);
    if ((lv_unitcount[0] == 0) && (lv_unitcount[1] == 0)) {
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, StringExternal("Param/Value/19FA4295"));
        return true;
    }
    else if ((lv_unitcount[0] == 0)) {
        lv_winningplayer = 10;
        lv_winningtext = StringExternal("Param/Value/EA1EC491");
        lv_unitcount[0] = lv_unitcount[1];
    }
    else if ((lv_unitcount[1] == 0)) {
        lv_winningplayer = 9;
        lv_winningtext = StringExternal("Param/Value/E8430A46");
    }
    UnitGroupLoopBegin(UnitGroup(null, lv_winningplayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        lv_mineralscount += UnitTypeGetCost(UnitGetType(UnitGroupLoopCurrent()), c_unitCostMinerals);
        lv_vespenecount += UnitTypeGetCost(UnitGetType(UnitGroupLoopCurrent()), c_unitCostVespene);
    }
    UnitGroupLoopEnd();
    lv_supplycount = PlayerGetPropertyInt(lv_winningplayer, c_playerPropSuppliesUsed);
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (lv_winningtext + StringExternal("Param/Value/9AFFD9A5") + IntToText(lv_unitcount[0]) + StringExternal("Param/Value/40A51339") + IntToText(lv_mineralscount) + StringExternal("Param/Value/FDAEF2C5") + IntToText(lv_vespenecount) + StringExternal("Param/Value/044F853C") + IntToText(lv_supplycount) + StringExternal("Param/Value/D97699DE")));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Update_Init () {
    gt_Update = TriggerCreate("gt_Update_Func");
    TriggerEnable(gt_Update, false);
    TriggerAddEventTimePeriodic(gt_Update, 4.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack
//--------------------------------------------------------------------------------------------------
bool gt_Attack_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(gf_AttackMode())) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_shiftToggle == true) && (gv_ctrlToggle == false)) {
        UnitGroupIssueOrder(UnitGroup(null, 9, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(107)), c_orderQueueReplace);
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, StringExternal("Param/Value/ACC8E9BC"));
    }
    else if ((gv_shiftToggle == false) && (gv_ctrlToggle == true)) {
        UnitGroupIssueOrder(UnitGroup(null, 10, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(106)), c_orderQueueReplace);
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, StringExternal("Param/Value/F3582AB2"));
    }
    else if (true) {
        UnitGroupIssueOrder(UnitGroup(null, 9, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(109)), c_orderQueueReplace);
        UnitGroupIssueOrder(UnitGroup(null, 10, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(109)), c_orderQueueReplace);
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, StringExternal("Param/Value/3EA6CDD2"));
    }
    Wait(1.0, c_timeGame);
    UIClearMessages(PlayerGroupActive(), c_messageAreaSubtitle);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Attack_Init () {
    gt_Attack = TriggerCreate("gt_Attack_Func");
    TriggerAddEventKeyPressed(gt_Attack, c_playerAny, c_keyPeriod, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Redo
//--------------------------------------------------------------------------------------------------
bool gt_Redo_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(gf_CreatorMode())) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, StringExternal("Param/Value/EAA47F3E"));
    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
    Wait(0.1, c_timeGame);
    gf_InitLeaderboard();
    gf_ResetUnits();
    Wait(1.0, c_timeGame);
    DialogControlSetEnabled(gv_buttonRedo, PlayerGroupActive(), true);
    UIClearMessages(PlayerGroupActive(), c_messageAreaSubtitle);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Redo_Init () {
    gt_Redo = TriggerCreate("gt_Redo_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Switch
//--------------------------------------------------------------------------------------------------
bool gt_Switch_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_x1;
    fixed lv_x2;
    fixed lv_y1;
    fixed lv_y2;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(gf_CreatorMode())) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, StringExternal("Param/Value/B9CB9790"));
    DialogControlSetEnabled(gv_buttonSwitch, PlayerGroupActive(), false);
    Wait(0.1, c_timeGame);
    TriggerEnable(gt_UnitCreated, false);
    lv_x1 = PointGetX(PointFromId(106));
    lv_y1 = PointGetY(PointFromId(106));
    lv_x2 = PointGetX(PointFromId(107));
    lv_y2 = PointGetY(PointFromId(107));
    PointSet(PointFromId(107), Point(lv_x1, lv_y1));
    PointSet(PointFromId(106), Point(lv_x2, lv_y2));
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitSetPosition(UnitGroupLoopCurrent(), PointFromId(105), false);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, 9, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, UnitGetType(UnitGroupLoopCurrent()), 0, 9, PointFromId(106));
        libNtve_gf_MakeUnitUncommandable(UnitLastCreated(), true);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, 10, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, UnitGetType(UnitGroupLoopCurrent()), 0, 10, PointFromId(107));
        libNtve_gf_MakeUnitUncommandable(UnitLastCreated(), true);
    }
    UnitGroupLoopEnd();
    Wait(0.1, c_timeGame);
    TriggerEnable(gt_UnitCreated, true);
    Wait(1.0, c_timeGame);
    DialogControlSetEnabled(gv_buttonSwitch, PlayerGroupActive(), true);
    UIClearMessages(PlayerGroupActive(), c_messageAreaSubtitle);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Switch_Init () {
    gt_Switch = TriggerCreate("gt_Switch_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Delete
//--------------------------------------------------------------------------------------------------
bool gt_Delete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(gf_CreatorMode())) {
            return false;
        }

        if (!(gf_PlayerhasPermission())) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroupSelected(EventPlayer()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((libNtve_gf_UnitIsInvulnerable(UnitGroupLoopCurrent()) == false)) {
            UnitKill(UnitGroupLoopCurrent());
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Delete_Init () {
    gt_Delete = TriggerCreate("gt_Delete_Func");
    TriggerAddEventKeyPressed(gt_Delete, c_playerAny, c_keyBackSpace, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Clear
//--------------------------------------------------------------------------------------------------
bool gt_Clear_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(gf_CreatorMode())) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, StringExternal("Param/Value/AE6B3501"));
    DialogControlSetEnabled(gv_buttonClear, PlayerGroupActive(), false);
    Wait(0.1, c_timeGame);
    gf_DeleteAll();
    gf_InitLeaderboard();
    Wait(1.0, c_timeGame);
    gf_RestoreMapStructures();
    DialogControlSetEnabled(gv_buttonClear, PlayerGroupActive(), true);
    UIClearMessages(PlayerGroupActive(), c_messageAreaSubtitle);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Clear_Init () {
    gt_Clear = TriggerCreate("gt_Clear_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Click
//--------------------------------------------------------------------------------------------------
bool gt_Click_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlay(SoundLink("UI_NavButtonSelect", -1), PlayerGroupActive(), 100.0, 0.0);
    if (gf_AttackMode()) {
        if ((gf_AttackActions() == true)) {
            return true;
        }
        else {
        }
    }
    else if (gf_CreatorMode() && gf_PlayerhasPermission()) {
        if ((gf_UnitDialogActions() == true)) {
            return true;
        }
        else {
        }
        if ((gf_CreatorActions() == true)) {
            return true;
        }
        else {
        }
    }
    else if (gf_CreatorMode()) {
        if ((EventDialogControl() == gv_buttonOptionsSubmenu)) {
            gf_ShowhideOptionsAlliances();
            return true;
        }
        else {
        }
    }
    if ((gf_SubmenusActions() == true)) {
        return true;
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Click_Init () {
    gt_Click = TriggerCreate("gt_Click_Func");
    TriggerAddEventDialogControl(gt_Click, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Created
//--------------------------------------------------------------------------------------------------
bool gt_UnitCreated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_unittype;
    string lv_unitname;
    int lv_column;
    int lv_row;
    int lv_unitcount;

    // Variable Initialization
    lv_unittype = UnitGetType(EventUnitCreatedUnit());

    // Conditions
    if (testConds) {
        if (!(gf_ValidUnitType(lv_unittype))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_unitname = (lv_unittype);
    gv_computer = UnitGetOwner(EventUnitCreatedUnit());
    lv_unitcount = UnitGroupCount(UnitGroup(lv_unittype, gv_computer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), c_unitCountAlive);
    lv_column = (gv_computer - 8);
    if ((DataTableValueExists(true, lv_unitname) == false)) {
        lv_row = gf_AddLeaderboardRow(lv_unitname);
    }
    else {
        lv_row = DataTableGetInt(true, lv_unitname);
    }
    gv_totalMineral[lv_column] += UnitTypeGetCost(lv_unittype, c_unitCostMinerals);
    gv_totalVespene[lv_column] += UnitTypeGetCost(lv_unittype, c_unitCostVespene);
    if (gf_SpecialUnitType(lv_unittype)) {
        gf_SpecialUnitCost(lv_unittype, lv_column, false);
    }
    else {
    }
    BoardItemSetText(gv_leaderboard, lv_column, 1, IntToText(gv_totalMineral[lv_column]));
    BoardItemSetText(gv_leaderboard, lv_column, 2, IntToText(gv_totalVespene[lv_column]));
    BoardItemSetText(gv_leaderboard, lv_column, 3, IntToText(PlayerGetPropertyInt(gv_computer, c_playerPropSuppliesUsed)));
    BoardItemSetText(gv_leaderboard, lv_column, lv_row, IntToText(lv_unitcount));
    if ((gv_iconFlag[lv_column][lv_row] == false)) {
        gf_AddLeaderboardIcon(lv_unittype, lv_column, lv_row);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnitCreated_Init () {
    gt_UnitCreated = TriggerCreate("gt_UnitCreated_Func");
    TriggerAddEventUnitCreated(gt_UnitCreated, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Dies
//--------------------------------------------------------------------------------------------------
bool gt_UnitDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_unittype;
    string lv_unitname;
    int lv_column;
    int lv_row;
    int lv_unitcount;

    // Variable Initialization
    lv_unittype = UnitGetType(EventUnit());

    // Conditions
    if (testConds) {
        if (!(gf_ValidUnitType(lv_unittype))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_unitname = (lv_unittype);
    gv_computer = UnitGetOwner(EventUnit());
    lv_column = (gv_computer - 8);
    lv_row = DataTableGetInt(true, lv_unitname);
    gv_totalMineral[lv_column] -= UnitTypeGetCost(lv_unittype, c_unitCostMinerals);
    gv_totalVespene[lv_column] -= UnitTypeGetCost(lv_unittype, c_unitCostVespene);
    if (gf_SpecialUnitType(lv_unittype)) {
        gf_SpecialUnitCost(lv_unittype, lv_column, true);
    }
    else {
    }
    BoardItemSetText(gv_leaderboard, lv_column, 1, IntToText(gv_totalMineral[lv_column]));
    BoardItemSetText(gv_leaderboard, lv_column, 2, IntToText(gv_totalVespene[lv_column]));
    BoardItemSetText(gv_leaderboard, lv_column, 3, IntToText(PlayerGetPropertyInt(gv_computer, c_playerPropSuppliesUsed)));
    lv_unitcount = UnitGroupCount(UnitGroup(lv_unittype, gv_computer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), c_unitCountAlive);
    if ((lv_unitcount == 0)) {
        BoardItemSetText(gv_leaderboard, lv_column, lv_row, StringExternal("Param/Value/237C08AC"));
        BoardItemSetIcon(gv_leaderboard, lv_column, lv_row, null, true);
        gv_iconFlag[lv_column][lv_row] = false;
    }
    else {
        BoardItemSetText(gv_leaderboard, lv_column, lv_row, IntToText(lv_unitcount));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnitDies_Init () {
    gt_UnitDies = TriggerCreate("gt_UnitDies_Func");
    TriggerAddEventUnitDied(gt_UnitDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ctrl Toggle Off
//--------------------------------------------------------------------------------------------------
bool gt_CtrlToggleOff_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((DialogIsVisible(gv_dialogCreator, 1) == false))) {
            return false;
        }

        if (!((DialogIsVisible(gv_dialogOptions, 1) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_ctrlToggle = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CtrlToggleOff_Init () {
    gt_CtrlToggleOff = TriggerCreate("gt_CtrlToggleOff_Func");
    TriggerAddEventKeyPressed(gt_CtrlToggleOff, c_playerAny, c_keyControl, false, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ctrl Toggle On
//--------------------------------------------------------------------------------------------------
bool gt_CtrlToggleOn_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((DialogIsVisible(gv_dialogCreator, 1) == false))) {
            return false;
        }

        if (!((DialogIsVisible(gv_dialogOptions, 1) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_ctrlToggle = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CtrlToggleOn_Init () {
    gt_CtrlToggleOn = TriggerCreate("gt_CtrlToggleOn_Func");
    TriggerAddEventKeyPressed(gt_CtrlToggleOn, c_playerAny, c_keyControl, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Shift Toggle Off
//--------------------------------------------------------------------------------------------------
bool gt_ShiftToggleOff_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if (gf_CreatorMode() && gf_PlayerhasPermission()) {
        gv__15 = 1;
    }
    else {
    }
    gv_shiftToggle = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShiftToggleOff_Init () {
    gt_ShiftToggleOff = TriggerCreate("gt_ShiftToggleOff_Func");
    TriggerAddEventKeyPressed(gt_ShiftToggleOff, c_playerAny, c_keyShift, false, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Shift Toggle On
//--------------------------------------------------------------------------------------------------
bool gt_ShiftToggleOn_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_shiftToggle = true;
    if (gf_CreatorMode() && gf_PlayerhasPermission()) {
        gv__15 = 5;
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShiftToggleOn_Init () {
    gt_ShiftToggleOn = TriggerCreate("gt_ShiftToggleOn_Func");
    TriggerAddEventKeyPressed(gt_ShiftToggleOn, c_playerAny, c_keyShift, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Instant Training
//--------------------------------------------------------------------------------------------------
bool gt_InstantTraining_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_instant == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetProgressStage(EventUnit(), 1, c_unitProgressStagePause);
    UnitSetProgressComplete(EventUnit(), 1, 99);
    UnitSetProgressStage(EventUnit(), 1, c_unitProgressStageResume);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InstantTraining_Init () {
    gt_InstantTraining = TriggerCreate("gt_InstantTraining_Func");
    TriggerAddEventUnitResearchProgress(gt_InstantTraining, null, c_unitProgressStageStart);
    TriggerAddEventUnitTrainProgress(gt_InstantTraining, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Instant Construction
//--------------------------------------------------------------------------------------------------
bool gt_InstantConstruction_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitProgressUnit()) != "NydusCanal"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_instant == true)) {
        UnitSetProgressStage(EventUnit(), 1, c_unitProgressStagePause);
        UnitSetProgressComplete(EventUnitProgressUnit(), 1, 99);
        UnitSetProgressStage(EventUnit(), 1, c_unitProgressStageResume);
    }
    else {
    }
    if ((gv_zergPlayer != 0) && (UnitGetType(EventUnitProgressUnit()) != "CreepTumor") && (UnitGetType(EventUnitProgressUnit()) != "Lair") && (UnitGetType(EventUnitProgressUnit()) != "Hive") && (UnitGetType(EventUnitProgressUnit()) != "GreaterSpire")) {
        if ((UnitGetOwner(EventUnitProgressUnit()) == 9)) {
            while (!((UnitGetType(gv_zergBuilderRed) != "Drone2"))) {
                Wait(0.1, c_timeGame);
            }
            UnitClearSelection(gv_zergPlayer);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Drone2", 0, 9, PointWithOffsetPolar(UnitGetPosition(EventUnitProgressUnit()), 1.5, 270.0));
            gv_zergBuilderRed = UnitLastCreated();
            UnitSelect(gv_zergBuilderRed, gv_zergPlayer, true);
        }
        else {
            while (!((UnitGetType(gv_zergBuilderBlue) != "Drone2"))) {
                Wait(0.1, c_timeGame);
            }
            UnitClearSelection(gv_zergPlayer);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Drone2", 0, 10, PointWithOffsetPolar(UnitGetPosition(EventUnitProgressUnit()), 1.5, 270.0));
            gv_zergBuilderBlue = UnitLastCreated();
            UnitSelect(gv_zergBuilderBlue, gv_zergPlayer, true);
        }
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InstantConstruction_Init () {
    gt_InstantConstruction = TriggerCreate("gt_InstantConstruction_Func");
    TriggerAddEventUnitConstructProgress(gt_InstantConstruction, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Deselects Any Builder
//--------------------------------------------------------------------------------------------------
bool gt_PlayerDeselectsAnyBuilder_Func (bool testConds, bool runActions) {
    unit auto8DBC1EF3_val;

    // Actions
    if (!runActions) {
        return true;
    }

    while (!((UnitOrderCount(EventUnit()) == 0))) {
        Wait(1.0, c_timeGame);
    }
    auto8DBC1EF3_val = EventUnit();
    if (auto8DBC1EF3_val == UnitFromId(110)) {
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(116)), c_orderQueueReplace);
        UnitWaitUntilIdle(EventUnit(), true);
        libNtve_gf_MakeUnitUncommandable(EventUnit(), false);
        UnitSetFacing(EventUnit(), 180.0, 1.0);
    }
    else if (auto8DBC1EF3_val == UnitFromId(113)) {
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(119)), c_orderQueueReplace);
        UnitWaitUntilIdle(EventUnit(), true);
        libNtve_gf_MakeUnitUncommandable(EventUnit(), false);
        UnitSetFacing(EventUnit(), 0.0, 1.0);
    }
    else if (auto8DBC1EF3_val == UnitFromId(111)) {
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(117)), c_orderQueueReplace);
        UnitWaitUntilIdle(EventUnit(), true);
        libNtve_gf_MakeUnitUncommandable(EventUnit(), false);
        UnitSetFacing(EventUnit(), 180.0, 1.0);
    }
    else if (auto8DBC1EF3_val == UnitFromId(114)) {
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(120)), c_orderQueueReplace);
        UnitWaitUntilIdle(EventUnit(), true);
        libNtve_gf_MakeUnitUncommandable(EventUnit(), false);
        UnitSetFacing(EventUnit(), 0.0, 1.0);
    }
    else if (auto8DBC1EF3_val == gv_zergBuilderRed) {
        gv_zergPlayer = 0;
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(118)), c_orderQueueReplace);
        UnitWaitUntilIdle(EventUnit(), true);
        libNtve_gf_MakeUnitUncommandable(EventUnit(), false);
        UnitSetFacing(EventUnit(), 180.0, 1.0);
    }
    else if (auto8DBC1EF3_val == gv_zergBuilderBlue) {
        gv_zergPlayer = 0;
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(121)), c_orderQueueReplace);
        UnitWaitUntilIdle(EventUnit(), true);
        libNtve_gf_MakeUnitUncommandable(EventUnit(), false);
        UnitSetFacing(EventUnit(), 0.0, 1.0);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerDeselectsAnyBuilder_Init () {
    gt_PlayerDeselectsAnyBuilder = TriggerCreate("gt_PlayerDeselectsAnyBuilder_Func");
    TriggerAddEventUnitSelected(gt_PlayerDeselectsAnyBuilder, UnitRefFromUnit(UnitFromId(110)), c_playerAny, false);
    TriggerAddEventUnitSelected(gt_PlayerDeselectsAnyBuilder, UnitRefFromUnit(UnitFromId(113)), c_playerAny, false);
    TriggerAddEventUnitSelected(gt_PlayerDeselectsAnyBuilder, UnitRefFromUnit(UnitFromId(111)), c_playerAny, false);
    TriggerAddEventUnitSelected(gt_PlayerDeselectsAnyBuilder, UnitRefFromUnit(UnitFromId(114)), c_playerAny, false);
    TriggerAddEventUnitSelected(gt_PlayerDeselectsAnyBuilder, UnitRefFromVariable("gv_zergBuilderRed"), c_playerAny, false);
    TriggerAddEventUnitSelected(gt_PlayerDeselectsAnyBuilder, UnitRefFromVariable("gv_zergBuilderBlue"), c_playerAny, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Selects Zerg Builder
//--------------------------------------------------------------------------------------------------
bool gt_PlayerSelectsZergBuilder_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_zergPlayer = EventPlayer();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerSelectsZergBuilder_Init () {
    gt_PlayerSelectsZergBuilder = TriggerCreate("gt_PlayerSelectsZergBuilder_Func");
    TriggerAddEventUnitSelected(gt_PlayerSelectsZergBuilder, UnitRefFromVariable("gv_zergBuilderRed"), c_playerAny, true);
    TriggerAddEventUnitSelected(gt_PlayerSelectsZergBuilder, UnitRefFromVariable("gv_zergBuilderBlue"), c_playerAny, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tac Nuke Strike
//--------------------------------------------------------------------------------------------------
bool gt_TacNukeStrike_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(EventUnit()) == 9)) {
        UnitMagazineArm(UnitFromId(68), AbilityCommand("ArmSiloWithNuke", 0), 1);
    }
    else {
        UnitMagazineArm(UnitFromId(67), AbilityCommand("ArmSiloWithNuke", 0), 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TacNukeStrike_Init () {
    gt_TacNukeStrike = TriggerCreate("gt_TacNukeStrike_Func");
    TriggerAddEventUnitAbility(gt_TacNukeStrike, null, AbilityCommand("TacNukeStrike", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Neutral Structure
//--------------------------------------------------------------------------------------------------
bool gt_CreateNeutralStructure_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnitCreatedUnit()) == "XelNagaTower") || (UnitGetType(EventUnitCreatedUnit()) == "DestructibleRock4x4") || (UnitGetType(EventUnitCreatedUnit()) == "SupplyDepotLowered") || (UnitGetType(EventUnitCreatedUnit()) == "MineralField") || (UnitGetType(EventUnitCreatedUnit()) == "VespeneGeyser")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetOwner(EventUnitCreatedUnit(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateNeutralStructure_Init () {
    gt_CreateNeutralStructure = TriggerCreate("gt_CreateNeutralStructure_Func");
    TriggerAddEventUnitCreated(gt_CreateNeutralStructure, null, "CustomBuild", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_InitializeMap_Init();
    gt_InitializeData_Init();
    gt_Back_Init();
    gt_Start_Init();
    gt_Pause_Init();
    gt_Energy_Init();
    gt_Respawn_Init();
    gt_Update_Init();
    gt_Attack_Init();
    gt_Redo_Init();
    gt_Switch_Init();
    gt_Delete_Init();
    gt_Clear_Init();
    gt_Click_Init();
    gt_UnitCreated_Init();
    gt_UnitDies_Init();
    gt_CtrlToggleOff_Init();
    gt_CtrlToggleOn_Init();
    gt_ShiftToggleOff_Init();
    gt_ShiftToggleOn_Init();
    gt_InstantTraining_Init();
    gt_InstantConstruction_Init();
    gt_PlayerDeselectsAnyBuilder_Init();
    gt_PlayerSelectsZergBuilder_Init();
    gt_TacNukeStrike_Init();
    gt_CreateNeutralStructure_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
